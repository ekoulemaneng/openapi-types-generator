/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface Paths {}

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface Webhooks {
  "balancePlatform.accountHolder.created": {
    post: {
      request: {
        path?: {};
        headers?: {
          "Content-Type"?: "application/json";
          [k: string]: unknown;
        };
        cookies?: {
          [k: string]: unknown;
        };
        query?: {
          [k: string]: unknown;
        };
        body?: {
          data: {
            accountHolder?: {
              /**
               * The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.
               */
              balancePlatform?: string;
              /**
               * Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.
               */
              capabilities?: {
                [k: string]: {
                  /**
                   * Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
                   */
                  allowed?: boolean;
                  /**
                   * The capability level that is allowed for the account holder.
                   *
                   * Possible values: **notApplicable**, **low**, **medium**, **high**.
                   */
                  allowedLevel?: "high" | "low" | "medium" | "notApplicable";
                  allowedSettings?: {
                    paths?: {
                      content?: string[];
                      [k: string]: unknown;
                    }[];
                    rootPath?: {
                      content?: string[];
                      [k: string]: unknown;
                    };
                    [k: string]: unknown;
                  };
                  /**
                   * Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
                   */
                  enabled?: boolean;
                  /**
                   * Contains verification errors and the actions that you can take to resolve them.
                   */
                  problems?: {
                    [k: string]: unknown;
                  }[];
                  /**
                   * Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
                   */
                  requested?: boolean;
                  /**
                   * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
                   *
                   * Possible values: **notApplicable**, **low**, **medium**, **high**.
                   */
                  requestedLevel?: "high" | "low" | "medium" | "notApplicable";
                  requestedSettings?: {
                    paths?: {
                      content?: string[];
                      [k: string]: unknown;
                    }[];
                    rootPath?: {
                      content?: string[];
                      [k: string]: unknown;
                    };
                    [k: string]: unknown;
                  };
                  /**
                   * Contains the status of the transfer instruments associated with this capability.
                   */
                  transferInstruments?: {
                    /**
                     * Indicates whether the supporting entity capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
                     */
                    allowed?: boolean;
                    /**
                     * The capability level that is allowed for the account holder.
                     *
                     * Possible values: **notApplicable**, **low**, **medium**, **high**.
                     */
                    allowedLevel?: "high" | "low" | "medium" | "notApplicable";
                    /**
                     * Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
                     */
                    enabled?: boolean;
                    /**
                     * The ID of the supporting entity.
                     */
                    id?: string;
                    /**
                     * Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
                     */
                    requested?: boolean;
                    /**
                     * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
                     *
                     * Possible values: **notApplicable**, **low**, **medium**, **high**.
                     */
                    requestedLevel?: "high" | "low" | "medium" | "notApplicable";
                    /**
                     * The status of the verification checks for the supporting entity capability.
                     *
                     * Possible values:
                     *
                     * * **pending**: Adyen is running the verification.
                     *
                     * * **invalid**: The verification failed. Check if the `errors` array contains more information.
                     *
                     * * **valid**: The verification has been successfully completed.
                     *
                     * * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
                     *
                     */
                    verificationStatus?: "invalid" | "pending" | "rejected" | "valid";
                    [k: string]: unknown;
                  }[];
                  /**
                   * The status of the verification checks for the capability.
                   *
                   * Possible values:
                   *
                   * * **pending**: Adyen is running the verification.
                   *
                   * * **invalid**: The verification failed. Check if the `errors` array contains more information.
                   *
                   * * **valid**: The verification has been successfully completed.
                   *
                   * * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
                   *
                   */
                  verificationStatus?: "invalid" | "pending" | "rejected" | "valid";
                  [k: string]: unknown;
                };
              };
              contactDetails?: {
                address: {
                  /**
                   * The name of the city. Maximum length: 3000 characters.
                   */
                  city: string;
                  /**
                   * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
                   * > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
                   */
                  country: string;
                  /**
                   * The number or name of the house. Maximum length: 3000 characters.
                   */
                  houseNumberOrName: string;
                  /**
                   * A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
                   */
                  postalCode: string;
                  /**
                   * The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
                   * > Required for the US and Canada.
                   */
                  stateOrProvince?: string;
                  /**
                   * The name of the street. Maximum length: 3000 characters.
                   * > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
                   */
                  street: string;
                  [k: string]: unknown;
                };
                /**
                 * The email address of the account holder.
                 */
                email: string;
                phone: {
                  /**
                   * The full phone number provided as a single string.
                   * For example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**,
                   *
                   *  or **"(0031) 611223344"**.
                   */
                  number: string;
                  /**
                   * Type of phone number.
                   * Possible values:
                   * **Landline**, **Mobile**.
                   *
                   */
                  type: "Landline" | "Mobile";
                  [k: string]: unknown;
                };
                /**
                 * The URL of the account holder's website.
                 */
                webAddress?: string;
                [k: string]: unknown;
              };
              /**
               * Your description for the account holder, maximum 300 characters.
               */
              description?: string;
              /**
               * The unique identifier of the account holder.
               */
              id: string;
              /**
               * The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.
               */
              legalEntityId: string;
              /**
               * The ID of the account holder's primary balance account. By default, this is set to the first balance account that you create for the account holder. To assign a different balance account, send a PATCH request.
               */
              primaryBalanceAccount?: string;
              /**
               * Your reference for the account holder, maximum 150 characters.
               */
              reference?: string;
              /**
               * The status of the account holder.
               *
               * Possible values:
               *
               *  * **Active**: The account holder is active. This is the default status when creating an account holder.
               *
               *  * **Inactive (Deprecated)**: The account holder is temporarily inactive due to missing KYC details. You can set the account back to active by providing the missing KYC details.
               *
               *  * **Suspended**: The account holder is permanently deactivated by Adyen. This action cannot be undone.
               *
               * * **Closed**: The account holder is permanently deactivated by you. This action cannot be undone.
               */
              status?: "Active" | "Closed" | "Inactive" | "Suspended";
              /**
               * The [time zone](https://www.iana.org/time-zones) of the account holder. For example, **Europe/Amsterdam**.
               * Defaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
               */
              timeZone?: string;
              [k: string]: unknown;
            };
            /**
             * The unique identifier of the balance platform.
             */
            balancePlatform?: string;
            [k: string]: unknown;
          };
          /**
           * The environment from which the webhook originated.
           *
           * Possible values: **test**, **live**.
           */
          environment: string;
          /**
           * Type of notification.
           */
          type: "balancePlatform.accountHolder.updated" | "balancePlatform.accountHolder.created";
          [k: string]: unknown;
        };
      };
      responses: {
        status: "200";
        headers: {
          "Content-Type": "application/json";
          [k: string]: unknown;
        };
        body: {
          /**
           * Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).
           */
          notificationResponse?: string;
          [k: string]: unknown;
        };
      };
    };
  };
  "balancePlatform.accountHolder.updated": {
    post: {
      request: {
        path?: {};
        headers?: {
          "Content-Type"?: "application/json";
          [k: string]: unknown;
        };
        cookies?: {
          [k: string]: unknown;
        };
        query?: {
          [k: string]: unknown;
        };
        body?: {
          data: {
            accountHolder?: {
              /**
               * The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.
               */
              balancePlatform?: string;
              /**
               * Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.
               */
              capabilities?: {
                [k: string]: {
                  /**
                   * Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
                   */
                  allowed?: boolean;
                  /**
                   * The capability level that is allowed for the account holder.
                   *
                   * Possible values: **notApplicable**, **low**, **medium**, **high**.
                   */
                  allowedLevel?: "high" | "low" | "medium" | "notApplicable";
                  allowedSettings?: {
                    paths?: {
                      content?: string[];
                      [k: string]: unknown;
                    }[];
                    rootPath?: {
                      content?: string[];
                      [k: string]: unknown;
                    };
                    [k: string]: unknown;
                  };
                  /**
                   * Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
                   */
                  enabled?: boolean;
                  /**
                   * Contains verification errors and the actions that you can take to resolve them.
                   */
                  problems?: {
                    [k: string]: unknown;
                  }[];
                  /**
                   * Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
                   */
                  requested?: boolean;
                  /**
                   * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
                   *
                   * Possible values: **notApplicable**, **low**, **medium**, **high**.
                   */
                  requestedLevel?: "high" | "low" | "medium" | "notApplicable";
                  requestedSettings?: {
                    paths?: {
                      content?: string[];
                      [k: string]: unknown;
                    }[];
                    rootPath?: {
                      content?: string[];
                      [k: string]: unknown;
                    };
                    [k: string]: unknown;
                  };
                  /**
                   * Contains the status of the transfer instruments associated with this capability.
                   */
                  transferInstruments?: {
                    /**
                     * Indicates whether the supporting entity capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
                     */
                    allowed?: boolean;
                    /**
                     * The capability level that is allowed for the account holder.
                     *
                     * Possible values: **notApplicable**, **low**, **medium**, **high**.
                     */
                    allowedLevel?: "high" | "low" | "medium" | "notApplicable";
                    /**
                     * Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
                     */
                    enabled?: boolean;
                    /**
                     * The ID of the supporting entity.
                     */
                    id?: string;
                    /**
                     * Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
                     */
                    requested?: boolean;
                    /**
                     * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
                     *
                     * Possible values: **notApplicable**, **low**, **medium**, **high**.
                     */
                    requestedLevel?: "high" | "low" | "medium" | "notApplicable";
                    /**
                     * The status of the verification checks for the supporting entity capability.
                     *
                     * Possible values:
                     *
                     * * **pending**: Adyen is running the verification.
                     *
                     * * **invalid**: The verification failed. Check if the `errors` array contains more information.
                     *
                     * * **valid**: The verification has been successfully completed.
                     *
                     * * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
                     *
                     */
                    verificationStatus?: "invalid" | "pending" | "rejected" | "valid";
                    [k: string]: unknown;
                  }[];
                  /**
                   * The status of the verification checks for the capability.
                   *
                   * Possible values:
                   *
                   * * **pending**: Adyen is running the verification.
                   *
                   * * **invalid**: The verification failed. Check if the `errors` array contains more information.
                   *
                   * * **valid**: The verification has been successfully completed.
                   *
                   * * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
                   *
                   */
                  verificationStatus?: "invalid" | "pending" | "rejected" | "valid";
                  [k: string]: unknown;
                };
              };
              contactDetails?: {
                address: {
                  /**
                   * The name of the city. Maximum length: 3000 characters.
                   */
                  city: string;
                  /**
                   * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
                   * > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
                   */
                  country: string;
                  /**
                   * The number or name of the house. Maximum length: 3000 characters.
                   */
                  houseNumberOrName: string;
                  /**
                   * A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
                   */
                  postalCode: string;
                  /**
                   * The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
                   * > Required for the US and Canada.
                   */
                  stateOrProvince?: string;
                  /**
                   * The name of the street. Maximum length: 3000 characters.
                   * > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
                   */
                  street: string;
                  [k: string]: unknown;
                };
                /**
                 * The email address of the account holder.
                 */
                email: string;
                phone: {
                  /**
                   * The full phone number provided as a single string.
                   * For example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**,
                   *
                   *  or **"(0031) 611223344"**.
                   */
                  number: string;
                  /**
                   * Type of phone number.
                   * Possible values:
                   * **Landline**, **Mobile**.
                   *
                   */
                  type: "Landline" | "Mobile";
                  [k: string]: unknown;
                };
                /**
                 * The URL of the account holder's website.
                 */
                webAddress?: string;
                [k: string]: unknown;
              };
              /**
               * Your description for the account holder, maximum 300 characters.
               */
              description?: string;
              /**
               * The unique identifier of the account holder.
               */
              id: string;
              /**
               * The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.
               */
              legalEntityId: string;
              /**
               * The ID of the account holder's primary balance account. By default, this is set to the first balance account that you create for the account holder. To assign a different balance account, send a PATCH request.
               */
              primaryBalanceAccount?: string;
              /**
               * Your reference for the account holder, maximum 150 characters.
               */
              reference?: string;
              /**
               * The status of the account holder.
               *
               * Possible values:
               *
               *  * **Active**: The account holder is active. This is the default status when creating an account holder.
               *
               *  * **Inactive (Deprecated)**: The account holder is temporarily inactive due to missing KYC details. You can set the account back to active by providing the missing KYC details.
               *
               *  * **Suspended**: The account holder is permanently deactivated by Adyen. This action cannot be undone.
               *
               * * **Closed**: The account holder is permanently deactivated by you. This action cannot be undone.
               */
              status?: "Active" | "Closed" | "Inactive" | "Suspended";
              /**
               * The [time zone](https://www.iana.org/time-zones) of the account holder. For example, **Europe/Amsterdam**.
               * Defaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
               */
              timeZone?: string;
              [k: string]: unknown;
            };
            /**
             * The unique identifier of the balance platform.
             */
            balancePlatform?: string;
            [k: string]: unknown;
          };
          /**
           * The environment from which the webhook originated.
           *
           * Possible values: **test**, **live**.
           */
          environment: string;
          /**
           * Type of notification.
           */
          type: "balancePlatform.accountHolder.updated" | "balancePlatform.accountHolder.created";
          [k: string]: unknown;
        };
      };
      responses: {
        status: "200";
        headers: {
          "Content-Type": "application/json";
          [k: string]: unknown;
        };
        body: {
          /**
           * Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).
           */
          notificationResponse?: string;
          [k: string]: unknown;
        };
      };
    };
  };
  "balancePlatform.balanceAccount.created": {
    post: {
      request: {
        path?: {};
        headers?: {
          "Content-Type"?: "application/json";
          [k: string]: unknown;
        };
        cookies?: {
          [k: string]: unknown;
        };
        query?: {
          [k: string]: unknown;
        };
        body?: {
          data: {
            balanceAccount?: {
              /**
               * The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.
               */
              accountHolderId: string;
              /**
               * List of balances with the amount and currency.
               */
              balances?: {
                /**
                 * The remaining amount available for spending.
                 */
                available: number;
                /**
                 * The total amount in the balance.
                 */
                balance: number;
                /**
                 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance.
                 */
                currency: string;
                /**
                 * The amount reserved for payments that have been authorised, but have not been captured yet.
                 */
                reserved: number;
                [k: string]: unknown;
              }[];
              /**
               * The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account.
               * The default value is **EUR**.
               */
              defaultCurrencyCode?: string;
              /**
               * A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.
               */
              description?: string;
              /**
               * The unique identifier of the balance account.
               */
              id: string;
              /**
               * List of [payment instruments](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments) associated with the balance account.
               */
              paymentInstruments?: {
                /**
                 * The unique identifier of the payment instrument.
                 */
                id: string;
                [k: string]: unknown;
              }[];
              /**
               * Your reference for the balance account, maximum 150 characters.
               */
              reference?: string;
              /**
               * The status of the balance account, set to **Active** by default.
               *
               */
              status?: "Active" | "Closed" | "Inactive" | "Suspended";
              /**
               * Contains key-value pairs that specify configurations for balance sweeps per currency code. A sweep pulls in or pushes out funds based on a defined schedule, amount, and a source (for pulling funds) or a destination (for pushing funds).
               *
               * The key must be a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**. The value must be an object containing the sweep configuration.
               */
              sweepConfigurations?: {
                [k: string]: {
                  /**
                   * The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
                   *
                   *  You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
                   */
                  balanceAccountId?: string;
                  /**
                   * The unique identifier of the sweep.
                   */
                  id: string;
                  /**
                   * The merchant account that will be the source of funds. You can only use this if you are processing payments with Adyen. This can only be used for sweeps of `type` **pull** and `schedule.type` **balance**.
                   */
                  merchantAccount?: string;
                  /**
                   * The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
                   */
                  schedule:
                    | {
                        /**
                         * A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.
                         *
                         * The expression must have five values separated by a single space in the following order:
                         *
                         * * Minute: **0-59**
                         *
                         * * Hour: **0-23**
                         *
                         * * Day of the month: **1-31**
                         *
                         * * Month: **1-12** or **JAN-DEC**
                         *
                         * * Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.
                         *
                         * The following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and ** /**. See [crontab guru](https://crontab.guru/) for more examples.
                         */
                        cronExpression: string;
                        /**
                         * The schedule type.
                         *
                         * Possible values:
                         *
                         * * **cron**: push out funds based on a cron expression.
                         *
                         * * **daily**: push out funds daily at 07:00 AM CET.
                         *
                         * * **weekly**: push out funds every Monday at 07:00 AM CET.
                         *
                         * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                         *
                         * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                         */
                        type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
                      }
                    | {
                        /**
                         * The schedule type.
                         *
                         * Possible values:
                         *
                         * * **cron**: push out funds based on a cron expression.
                         *
                         * * **daily**: push out funds daily at 07:00 AM CET.
                         *
                         * * **weekly**: push out funds every Monday at 07:00 AM CET.
                         *
                         * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                         *
                         * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                         */
                        type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
                      };
                  /**
                   * The status of the sweep. If not provided, by default, this is set to **active**.
                   *
                   * Possible values:
                   *
                   *  * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
                   *
                   *  * **inactive**: the sweep is disabled and cannot be triggered.
                   *
                   *
                   */
                  status?: "active" | "inactive";
                  sweepAmount?: {
                    /**
                     * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                     */
                    currency: string;
                    /**
                     * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                     */
                    value: number;
                    [k: string]: unknown;
                  };
                  targetAmount?: {
                    /**
                     * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                     */
                    currency: string;
                    /**
                     * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                     */
                    value: number;
                    [k: string]: unknown;
                  };
                  /**
                   * The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).
                   *
                   * You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.
                   */
                  transferInstrumentId?: string;
                  triggerAmount?: {
                    /**
                     * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                     */
                    currency: string;
                    /**
                     * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                     */
                    value: number;
                    [k: string]: unknown;
                  };
                  /**
                   * The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
                   *
                   * Possible values:
                   *
                   *  * **push**: _push out funds_ to a destination balance account or transfer instrument.
                   *
                   *  * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
                   */
                  type?: "pull" | "push";
                  [k: string]: unknown;
                };
              };
              /**
               * The [time zone](https://www.iana.org/time-zones) of the balance account. For example, **Europe/Amsterdam**.
               * Defaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
               */
              timeZone?: string;
              [k: string]: unknown;
            };
            /**
             * The unique identifier of the balance platform.
             */
            balancePlatform?: string;
            [k: string]: unknown;
          };
          /**
           * The environment from which the webhook originated.
           *
           * Possible values: **test**, **live**.
           */
          environment: string;
          /**
           * Type of notification.
           */
          type: "balancePlatform.balanceAccount.updated" | "balancePlatform.balanceAccount.created";
          [k: string]: unknown;
        };
      };
      responses: {
        status: "200";
        headers: {
          "Content-Type": "application/json";
          [k: string]: unknown;
        };
        body: {
          /**
           * Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).
           */
          notificationResponse?: string;
          [k: string]: unknown;
        };
      };
    };
  };
  "balancePlatform.balanceAccount.updated": {
    post: {
      request: {
        path?: {};
        headers?: {
          "Content-Type"?: "application/json";
          [k: string]: unknown;
        };
        cookies?: {
          [k: string]: unknown;
        };
        query?: {
          [k: string]: unknown;
        };
        body?: {
          data: {
            balanceAccount?: {
              /**
               * The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.
               */
              accountHolderId: string;
              /**
               * List of balances with the amount and currency.
               */
              balances?: {
                /**
                 * The remaining amount available for spending.
                 */
                available: number;
                /**
                 * The total amount in the balance.
                 */
                balance: number;
                /**
                 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance.
                 */
                currency: string;
                /**
                 * The amount reserved for payments that have been authorised, but have not been captured yet.
                 */
                reserved: number;
                [k: string]: unknown;
              }[];
              /**
               * The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account.
               * The default value is **EUR**.
               */
              defaultCurrencyCode?: string;
              /**
               * A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.
               */
              description?: string;
              /**
               * The unique identifier of the balance account.
               */
              id: string;
              /**
               * List of [payment instruments](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments) associated with the balance account.
               */
              paymentInstruments?: {
                /**
                 * The unique identifier of the payment instrument.
                 */
                id: string;
                [k: string]: unknown;
              }[];
              /**
               * Your reference for the balance account, maximum 150 characters.
               */
              reference?: string;
              /**
               * The status of the balance account, set to **Active** by default.
               *
               */
              status?: "Active" | "Closed" | "Inactive" | "Suspended";
              /**
               * Contains key-value pairs that specify configurations for balance sweeps per currency code. A sweep pulls in or pushes out funds based on a defined schedule, amount, and a source (for pulling funds) or a destination (for pushing funds).
               *
               * The key must be a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**. The value must be an object containing the sweep configuration.
               */
              sweepConfigurations?: {
                [k: string]: {
                  /**
                   * The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
                   *
                   *  You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
                   */
                  balanceAccountId?: string;
                  /**
                   * The unique identifier of the sweep.
                   */
                  id: string;
                  /**
                   * The merchant account that will be the source of funds. You can only use this if you are processing payments with Adyen. This can only be used for sweeps of `type` **pull** and `schedule.type` **balance**.
                   */
                  merchantAccount?: string;
                  /**
                   * The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
                   */
                  schedule:
                    | {
                        /**
                         * A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.
                         *
                         * The expression must have five values separated by a single space in the following order:
                         *
                         * * Minute: **0-59**
                         *
                         * * Hour: **0-23**
                         *
                         * * Day of the month: **1-31**
                         *
                         * * Month: **1-12** or **JAN-DEC**
                         *
                         * * Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.
                         *
                         * The following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and ** /**. See [crontab guru](https://crontab.guru/) for more examples.
                         */
                        cronExpression: string;
                        /**
                         * The schedule type.
                         *
                         * Possible values:
                         *
                         * * **cron**: push out funds based on a cron expression.
                         *
                         * * **daily**: push out funds daily at 07:00 AM CET.
                         *
                         * * **weekly**: push out funds every Monday at 07:00 AM CET.
                         *
                         * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                         *
                         * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                         */
                        type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
                      }
                    | {
                        /**
                         * The schedule type.
                         *
                         * Possible values:
                         *
                         * * **cron**: push out funds based on a cron expression.
                         *
                         * * **daily**: push out funds daily at 07:00 AM CET.
                         *
                         * * **weekly**: push out funds every Monday at 07:00 AM CET.
                         *
                         * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                         *
                         * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                         */
                        type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
                      };
                  /**
                   * The status of the sweep. If not provided, by default, this is set to **active**.
                   *
                   * Possible values:
                   *
                   *  * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
                   *
                   *  * **inactive**: the sweep is disabled and cannot be triggered.
                   *
                   *
                   */
                  status?: "active" | "inactive";
                  sweepAmount?: {
                    /**
                     * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                     */
                    currency: string;
                    /**
                     * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                     */
                    value: number;
                    [k: string]: unknown;
                  };
                  targetAmount?: {
                    /**
                     * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                     */
                    currency: string;
                    /**
                     * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                     */
                    value: number;
                    [k: string]: unknown;
                  };
                  /**
                   * The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).
                   *
                   * You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.
                   */
                  transferInstrumentId?: string;
                  triggerAmount?: {
                    /**
                     * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                     */
                    currency: string;
                    /**
                     * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                     */
                    value: number;
                    [k: string]: unknown;
                  };
                  /**
                   * The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
                   *
                   * Possible values:
                   *
                   *  * **push**: _push out funds_ to a destination balance account or transfer instrument.
                   *
                   *  * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
                   */
                  type?: "pull" | "push";
                  [k: string]: unknown;
                };
              };
              /**
               * The [time zone](https://www.iana.org/time-zones) of the balance account. For example, **Europe/Amsterdam**.
               * Defaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
               */
              timeZone?: string;
              [k: string]: unknown;
            };
            /**
             * The unique identifier of the balance platform.
             */
            balancePlatform?: string;
            [k: string]: unknown;
          };
          /**
           * The environment from which the webhook originated.
           *
           * Possible values: **test**, **live**.
           */
          environment: string;
          /**
           * Type of notification.
           */
          type: "balancePlatform.balanceAccount.updated" | "balancePlatform.balanceAccount.created";
          [k: string]: unknown;
        };
      };
      responses: {
        status: "200";
        headers: {
          "Content-Type": "application/json";
          [k: string]: unknown;
        };
        body: {
          /**
           * Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).
           */
          notificationResponse?: string;
          [k: string]: unknown;
        };
      };
    };
  };
  "balancePlatform.balanceAccountSweep.created": {
    post: {
      request: {
        path?: {};
        headers?: {
          "Content-Type"?: "application/json";
          [k: string]: unknown;
        };
        cookies?: {
          [k: string]: unknown;
        };
        query?: {
          [k: string]: unknown;
        };
        body?: {
          data: {
            /**
             * The unique identifier of the balance account for which the sweep was configured.
             */
            accountId?: string;
            /**
             * The unique identifier of the balance platform.
             */
            balancePlatform?: string;
            sweep?: {
              counterparty: {
                /**
                 * The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
                 *
                 *  You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
                 */
                balanceAccountId?: string;
                /**
                 * The merchant account that will be the source of funds, if you are processing payments with Adyen. You can only use this with sweeps of `type` **pull** and `schedule.type` **balance**.
                 */
                merchantAccount?: string;
                /**
                 * The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).
                 *
                 * You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.
                 */
                transferInstrumentId?: string;
                [k: string]: unknown;
              };
              /**
               * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.
               *
               * The sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances).
               */
              currency: string;
              /**
               * The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.
               *
               * If the message is longer after replacing placeholders, the message will be cut off at 140 characters.
               */
              description?: string;
              /**
               * The unique identifier of the sweep.
               */
              id: string;
              /**
               * The reason for disabling the sweep.
               */
              reason?:
                | "amountLimitExceeded"
                | "approved"
                | "counterpartyAccountBlocked"
                | "counterpartyAccountClosed"
                | "counterpartyAccountNotFound"
                | "counterpartyAddressRequired"
                | "counterpartyBankTimedOut"
                | "counterpartyBankUnavailable"
                | "error"
                | "notEnoughBalance"
                | "refusedByCounterpartyBank"
                | "routeNotFound"
                | "unknown";
              /**
               * The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
               */
              schedule:
                | {
                    /**
                     * A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.
                     *
                     * The expression must have five values separated by a single space in the following order:
                     *
                     * * Minute: **0-59**
                     *
                     * * Hour: **0-23**
                     *
                     * * Day of the month: **1-31**
                     *
                     * * Month: **1-12** or **JAN-DEC**
                     *
                     * * Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.
                     *
                     * The following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and ** /**. See [crontab guru](https://crontab.guru/) for more examples.
                     */
                    cronExpression: string;
                    /**
                     * The schedule type.
                     *
                     * Possible values:
                     *
                     * * **cron**: push out funds based on a cron expression.
                     *
                     * * **daily**: push out funds daily at 07:00 AM CET.
                     *
                     * * **weekly**: push out funds every Monday at 07:00 AM CET.
                     *
                     * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                     *
                     * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                     */
                    type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
                  }
                | {
                    /**
                     * The schedule type.
                     *
                     * Possible values:
                     *
                     * * **cron**: push out funds based on a cron expression.
                     *
                     * * **daily**: push out funds daily at 07:00 AM CET.
                     *
                     * * **weekly**: push out funds every Monday at 07:00 AM CET.
                     *
                     * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                     *
                     * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                     */
                    type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
                  };
              /**
               * The status of the sweep. If not provided, by default, this is set to **active**.
               *
               * Possible values:
               *
               *  * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
               *
               *  * **inactive**: the sweep is disabled and cannot be triggered.
               *
               *
               */
              status?: "active" | "inactive";
              sweepAmount?: {
                /**
                 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                 */
                currency: string;
                /**
                 * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                 */
                value: number;
                [k: string]: unknown;
              };
              targetAmount?: {
                /**
                 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                 */
                currency: string;
                /**
                 * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                 */
                value: number;
                [k: string]: unknown;
              };
              triggerAmount?: {
                /**
                 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                 */
                currency: string;
                /**
                 * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                 */
                value: number;
                [k: string]: unknown;
              };
              /**
               * The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
               *
               * Possible values:
               *
               *  * **push**: _push out funds_ to a destination balance account or transfer instrument.
               *
               *  * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
               */
              type?: "pull" | "push";
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * The environment from which the webhook originated.
           *
           * Possible values: **test**, **live**.
           */
          environment: string;
          /**
           * Type of notification.
           */
          type:
            | "balancePlatform.balanceAccountSweep.created"
            | "balancePlatform.balanceAccountSweep.updated"
            | "balancePlatform.balanceAccountSweep.deleted";
          [k: string]: unknown;
        };
      };
      responses: {
        status: "200";
        headers: {
          "Content-Type": "application/json";
          [k: string]: unknown;
        };
        body: {
          /**
           * Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).
           */
          notificationResponse?: string;
          [k: string]: unknown;
        };
      };
    };
  };
  "balancePlatform.balanceAccountSweep.deleted": {
    post: {
      request: {
        path?: {};
        headers?: {
          "Content-Type"?: "application/json";
          [k: string]: unknown;
        };
        cookies?: {
          [k: string]: unknown;
        };
        query?: {
          [k: string]: unknown;
        };
        body?: {
          data: {
            /**
             * The unique identifier of the balance account for which the sweep was configured.
             */
            accountId?: string;
            /**
             * The unique identifier of the balance platform.
             */
            balancePlatform?: string;
            sweep?: {
              counterparty: {
                /**
                 * The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
                 *
                 *  You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
                 */
                balanceAccountId?: string;
                /**
                 * The merchant account that will be the source of funds, if you are processing payments with Adyen. You can only use this with sweeps of `type` **pull** and `schedule.type` **balance**.
                 */
                merchantAccount?: string;
                /**
                 * The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).
                 *
                 * You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.
                 */
                transferInstrumentId?: string;
                [k: string]: unknown;
              };
              /**
               * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.
               *
               * The sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances).
               */
              currency: string;
              /**
               * The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.
               *
               * If the message is longer after replacing placeholders, the message will be cut off at 140 characters.
               */
              description?: string;
              /**
               * The unique identifier of the sweep.
               */
              id: string;
              /**
               * The reason for disabling the sweep.
               */
              reason?:
                | "amountLimitExceeded"
                | "approved"
                | "counterpartyAccountBlocked"
                | "counterpartyAccountClosed"
                | "counterpartyAccountNotFound"
                | "counterpartyAddressRequired"
                | "counterpartyBankTimedOut"
                | "counterpartyBankUnavailable"
                | "error"
                | "notEnoughBalance"
                | "refusedByCounterpartyBank"
                | "routeNotFound"
                | "unknown";
              /**
               * The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
               */
              schedule:
                | {
                    /**
                     * A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.
                     *
                     * The expression must have five values separated by a single space in the following order:
                     *
                     * * Minute: **0-59**
                     *
                     * * Hour: **0-23**
                     *
                     * * Day of the month: **1-31**
                     *
                     * * Month: **1-12** or **JAN-DEC**
                     *
                     * * Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.
                     *
                     * The following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and ** /**. See [crontab guru](https://crontab.guru/) for more examples.
                     */
                    cronExpression: string;
                    /**
                     * The schedule type.
                     *
                     * Possible values:
                     *
                     * * **cron**: push out funds based on a cron expression.
                     *
                     * * **daily**: push out funds daily at 07:00 AM CET.
                     *
                     * * **weekly**: push out funds every Monday at 07:00 AM CET.
                     *
                     * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                     *
                     * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                     */
                    type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
                  }
                | {
                    /**
                     * The schedule type.
                     *
                     * Possible values:
                     *
                     * * **cron**: push out funds based on a cron expression.
                     *
                     * * **daily**: push out funds daily at 07:00 AM CET.
                     *
                     * * **weekly**: push out funds every Monday at 07:00 AM CET.
                     *
                     * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                     *
                     * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                     */
                    type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
                  };
              /**
               * The status of the sweep. If not provided, by default, this is set to **active**.
               *
               * Possible values:
               *
               *  * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
               *
               *  * **inactive**: the sweep is disabled and cannot be triggered.
               *
               *
               */
              status?: "active" | "inactive";
              sweepAmount?: {
                /**
                 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                 */
                currency: string;
                /**
                 * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                 */
                value: number;
                [k: string]: unknown;
              };
              targetAmount?: {
                /**
                 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                 */
                currency: string;
                /**
                 * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                 */
                value: number;
                [k: string]: unknown;
              };
              triggerAmount?: {
                /**
                 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                 */
                currency: string;
                /**
                 * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                 */
                value: number;
                [k: string]: unknown;
              };
              /**
               * The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
               *
               * Possible values:
               *
               *  * **push**: _push out funds_ to a destination balance account or transfer instrument.
               *
               *  * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
               */
              type?: "pull" | "push";
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * The environment from which the webhook originated.
           *
           * Possible values: **test**, **live**.
           */
          environment: string;
          /**
           * Type of notification.
           */
          type:
            | "balancePlatform.balanceAccountSweep.created"
            | "balancePlatform.balanceAccountSweep.updated"
            | "balancePlatform.balanceAccountSweep.deleted";
          [k: string]: unknown;
        };
      };
      responses: {
        status: "200";
        headers: {
          "Content-Type": "application/json";
          [k: string]: unknown;
        };
        body: {
          /**
           * Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).
           */
          notificationResponse?: string;
          [k: string]: unknown;
        };
      };
    };
  };
  "balancePlatform.balanceAccountSweep.updated": {
    post: {
      request: {
        path?: {};
        headers?: {
          "Content-Type"?: "application/json";
          [k: string]: unknown;
        };
        cookies?: {
          [k: string]: unknown;
        };
        query?: {
          [k: string]: unknown;
        };
        body?: {
          data: {
            /**
             * The unique identifier of the balance account for which the sweep was configured.
             */
            accountId?: string;
            /**
             * The unique identifier of the balance platform.
             */
            balancePlatform?: string;
            sweep?: {
              counterparty: {
                /**
                 * The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
                 *
                 *  You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
                 */
                balanceAccountId?: string;
                /**
                 * The merchant account that will be the source of funds, if you are processing payments with Adyen. You can only use this with sweeps of `type` **pull** and `schedule.type` **balance**.
                 */
                merchantAccount?: string;
                /**
                 * The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).
                 *
                 * You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.
                 */
                transferInstrumentId?: string;
                [k: string]: unknown;
              };
              /**
               * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.
               *
               * The sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances).
               */
              currency: string;
              /**
               * The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.
               *
               * If the message is longer after replacing placeholders, the message will be cut off at 140 characters.
               */
              description?: string;
              /**
               * The unique identifier of the sweep.
               */
              id: string;
              /**
               * The reason for disabling the sweep.
               */
              reason?:
                | "amountLimitExceeded"
                | "approved"
                | "counterpartyAccountBlocked"
                | "counterpartyAccountClosed"
                | "counterpartyAccountNotFound"
                | "counterpartyAddressRequired"
                | "counterpartyBankTimedOut"
                | "counterpartyBankUnavailable"
                | "error"
                | "notEnoughBalance"
                | "refusedByCounterpartyBank"
                | "routeNotFound"
                | "unknown";
              /**
               * The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
               */
              schedule:
                | {
                    /**
                     * A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.
                     *
                     * The expression must have five values separated by a single space in the following order:
                     *
                     * * Minute: **0-59**
                     *
                     * * Hour: **0-23**
                     *
                     * * Day of the month: **1-31**
                     *
                     * * Month: **1-12** or **JAN-DEC**
                     *
                     * * Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.
                     *
                     * The following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and ** /**. See [crontab guru](https://crontab.guru/) for more examples.
                     */
                    cronExpression: string;
                    /**
                     * The schedule type.
                     *
                     * Possible values:
                     *
                     * * **cron**: push out funds based on a cron expression.
                     *
                     * * **daily**: push out funds daily at 07:00 AM CET.
                     *
                     * * **weekly**: push out funds every Monday at 07:00 AM CET.
                     *
                     * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                     *
                     * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                     */
                    type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
                  }
                | {
                    /**
                     * The schedule type.
                     *
                     * Possible values:
                     *
                     * * **cron**: push out funds based on a cron expression.
                     *
                     * * **daily**: push out funds daily at 07:00 AM CET.
                     *
                     * * **weekly**: push out funds every Monday at 07:00 AM CET.
                     *
                     * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                     *
                     * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                     */
                    type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
                  };
              /**
               * The status of the sweep. If not provided, by default, this is set to **active**.
               *
               * Possible values:
               *
               *  * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
               *
               *  * **inactive**: the sweep is disabled and cannot be triggered.
               *
               *
               */
              status?: "active" | "inactive";
              sweepAmount?: {
                /**
                 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                 */
                currency: string;
                /**
                 * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                 */
                value: number;
                [k: string]: unknown;
              };
              targetAmount?: {
                /**
                 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                 */
                currency: string;
                /**
                 * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                 */
                value: number;
                [k: string]: unknown;
              };
              triggerAmount?: {
                /**
                 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                 */
                currency: string;
                /**
                 * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                 */
                value: number;
                [k: string]: unknown;
              };
              /**
               * The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
               *
               * Possible values:
               *
               *  * **push**: _push out funds_ to a destination balance account or transfer instrument.
               *
               *  * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
               */
              type?: "pull" | "push";
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * The environment from which the webhook originated.
           *
           * Possible values: **test**, **live**.
           */
          environment: string;
          /**
           * Type of notification.
           */
          type:
            | "balancePlatform.balanceAccountSweep.created"
            | "balancePlatform.balanceAccountSweep.updated"
            | "balancePlatform.balanceAccountSweep.deleted";
          [k: string]: unknown;
        };
      };
      responses: {
        status: "200";
        headers: {
          "Content-Type": "application/json";
          [k: string]: unknown;
        };
        body: {
          /**
           * Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).
           */
          notificationResponse?: string;
          [k: string]: unknown;
        };
      };
    };
  };
  "balancePlatform.cardorder.created": {
    post: {
      request: {
        path?: {};
        headers?: {
          "Content-Type"?: "application/json";
          [k: string]: unknown;
        };
        cookies?: {
          [k: string]: unknown;
        };
        query?: {
          [k: string]: unknown;
        };
        body?: {
          data: {
            /**
             * The unique identifier of the balance platform.
             */
            balancePlatform?: string;
            card?: {
              /**
               * Status of the delivery.
               */
              status?: "created" | "delivered" | "processing" | "produced" | "rejected" | "shipped" | "unknown";
              /**
               * Error status, if any.
               */
              statusError?: string;
              /**
               * Error message, if any.
               */
              statusErrorMessage?: string;
              /**
               * Tracking number of the delivery.
               */
              trackingNumber?: string;
              [k: string]: unknown;
            };
            /**
             * The unique identifier of the card order.
             */
            cardOrderItemReference?: string;
            /**
             * The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
             */
            creationDate?: string;
            /**
             * The ID of the resource.
             */
            id?: string;
            /**
             * The unique identifier of the payment instrument related to the card order.
             */
            paymentInstrumentReference?: string;
            pin?: {
              /**
               * Status of the delivery.
               */
              status?: "created" | "delivered" | "processing" | "produced" | "rejected" | "shipped" | "unknown";
              /**
               * Error status, if any.
               */
              statusError?: string;
              /**
               * Error message, if any.
               */
              statusErrorMessage?: string;
              /**
               * Tracking number of the delivery.
               */
              trackingNumber?: string;
              [k: string]: unknown;
            };
            /**
             * Shipping method used to deliver the card or the PIN.
             */
            shippingMethod?: string;
            [k: string]: unknown;
          };
          /**
           * The environment from which the webhook originated.
           *
           * Possible values: **test**, **live**.
           */
          environment: string;
          /**
           * Type of notification.
           */
          type: "balancePlatform.cardorder.created" | "balancePlatform.cardorder.updated";
          [k: string]: unknown;
        };
      };
      responses: {
        status: "200";
        headers: {
          "Content-Type": "application/json";
          [k: string]: unknown;
        };
        body: {
          /**
           * Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).
           */
          notificationResponse?: string;
          [k: string]: unknown;
        };
      };
    };
  };
  "balancePlatform.cardorder.updated": {
    post: {
      request: {
        path?: {};
        headers?: {
          "Content-Type"?: "application/json";
          [k: string]: unknown;
        };
        cookies?: {
          [k: string]: unknown;
        };
        query?: {
          [k: string]: unknown;
        };
        body?: {
          data: {
            /**
             * The unique identifier of the balance platform.
             */
            balancePlatform?: string;
            card?: {
              /**
               * Status of the delivery.
               */
              status?: "created" | "delivered" | "processing" | "produced" | "rejected" | "shipped" | "unknown";
              /**
               * Error status, if any.
               */
              statusError?: string;
              /**
               * Error message, if any.
               */
              statusErrorMessage?: string;
              /**
               * Tracking number of the delivery.
               */
              trackingNumber?: string;
              [k: string]: unknown;
            };
            /**
             * The unique identifier of the card order.
             */
            cardOrderItemReference?: string;
            /**
             * The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
             */
            creationDate?: string;
            /**
             * The ID of the resource.
             */
            id?: string;
            /**
             * The unique identifier of the payment instrument related to the card order.
             */
            paymentInstrumentReference?: string;
            pin?: {
              /**
               * Status of the delivery.
               */
              status?: "created" | "delivered" | "processing" | "produced" | "rejected" | "shipped" | "unknown";
              /**
               * Error status, if any.
               */
              statusError?: string;
              /**
               * Error message, if any.
               */
              statusErrorMessage?: string;
              /**
               * Tracking number of the delivery.
               */
              trackingNumber?: string;
              [k: string]: unknown;
            };
            /**
             * Shipping method used to deliver the card or the PIN.
             */
            shippingMethod?: string;
            [k: string]: unknown;
          };
          /**
           * The environment from which the webhook originated.
           *
           * Possible values: **test**, **live**.
           */
          environment: string;
          /**
           * Type of notification.
           */
          type: "balancePlatform.cardorder.created" | "balancePlatform.cardorder.updated";
          [k: string]: unknown;
        };
      };
      responses: {
        status: "200";
        headers: {
          "Content-Type": "application/json";
          [k: string]: unknown;
        };
        body: {
          /**
           * Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).
           */
          notificationResponse?: string;
          [k: string]: unknown;
        };
      };
    };
  };
  "balancePlatform.paymentInstrument.created": {
    post: {
      request: {
        path?: {};
        headers?: {
          "Content-Type"?: "application/json";
          [k: string]: unknown;
        };
        cookies?: {
          [k: string]: unknown;
        };
        query?: {
          [k: string]: unknown;
        };
        body?: {
          data: {
            /**
             * The unique identifier of the balance platform.
             */
            balancePlatform?: string;
            paymentInstrument?: {
              /**
               * The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.
               */
              balanceAccountId: string;
              /**
               * Contains the business account details. Returned when you create a payment instrument with `type` **bankAccount**.
               */
              bankAccount?:
                | {
                    /**
                     * The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.
                     */
                    iban: string;
                    /**
                     * **iban**
                     */
                    type: "iban";
                  }
                | {
                    /**
                     * The bank account number, without separators or whitespace.
                     */
                    accountNumber: string;
                    /**
                     * The bank account type.
                     *
                     * Possible values: **checking** or **savings**. Defaults to **checking**.
                     */
                    accountType?: "checking" | "savings";
                    /**
                     * The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.
                     */
                    routingNumber: string;
                    /**
                     * **usLocal**
                     */
                    type: "usLocal";
                  };
              card?: {
                authentication?: {
                  /**
                   * The email address where the one-time password (OTP) is sent.
                   */
                  email?: string;
                  /**
                   * The password used for 3D Secure password-based authentication. The value must be between 1 to 30 characters and must only contain the following supported characters.
                   *
                   * * Characters between **a-z**, **A-Z**, and **0-9**
                   *
                   * * Special characters: **äöüßÄÖÜ+-* /ç%()=?!~#'",;:$&àùòâôûáúó**
                   */
                  password?: string;
                  phone?: {
                    /**
                     * The full phone number provided as a single string.
                     * For example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**,
                     *
                     *  or **"(0031) 611223344"**.
                     */
                    number: string;
                    /**
                     * Type of phone number.
                     * Possible values:
                     * **Landline**, **Mobile**.
                     *
                     */
                    type: "Landline" | "Mobile";
                    [k: string]: unknown;
                  };
                  [k: string]: unknown;
                };
                /**
                 * The bank identification number (BIN) of the card number.
                 */
                bin?: string;
                /**
                 * The brand of the physical or the virtual card.
                 * Possible values: **visa**, **mc**.
                 */
                brand: string;
                /**
                 * The brand variant of the physical or the virtual card.
                 * >Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.
                 */
                brandVariant: string;
                /**
                 * The name of the cardholder.
                 *  Maximum length: 26 characters.
                 */
                cardholderName: string;
                configuration?: {
                  /**
                   * Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions.
                   */
                  activation?: string;
                  /**
                   * Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process.
                   *
                   * Maximum length: 255 characters.
                   */
                  activationUrl?: string;
                  bulkAddress?: {
                    /**
                     * The name of the city.
                     */
                    city?: string;
                    /**
                     * The name of the company.
                     */
                    company?: string;
                    /**
                     * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
                     */
                    country: string;
                    /**
                     * The email address.
                     */
                    email?: string;
                    /**
                     * The house number or name.
                     */
                    houseNumberOrName?: string;
                    /**
                     * The full telephone number.
                     */
                    mobile?: string;
                    /**
                     * The postal code.
                     *
                     * Maximum length:
                     *
                     * * 5 digits for addresses in the US.
                     *
                     * * 10 characters for all other countries.
                     */
                    postalCode?: string;
                    /**
                     * The two-letter ISO 3166-2 state or province code.
                     *
                     * Maximum length: 2 characters for addresses in the US.
                     */
                    stateOrProvince?: string;
                    /**
                     * The streetname of the house.
                     */
                    street?: string;
                    [k: string]: unknown;
                  };
                  /**
                   * The ID of the card image. This is the image that will be printed on the full front of the card.
                   */
                  cardImageId?: string;
                  /**
                   * Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.
                   */
                  carrier?: string;
                  /**
                   * The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.
                   */
                  carrierImageId?: string;
                  /**
                   * The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.
                   *
                   * For example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.
                   */
                  configurationProfileId: string;
                  /**
                   * The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**.
                   */
                  currency?: string;
                  /**
                   * Overrides the envelope design ID defined in the `configurationProfileId`.
                   */
                  envelope?: string;
                  /**
                   * Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.
                   */
                  insert?: string;
                  /**
                   * The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**.
                   */
                  language?: string;
                  /**
                   * The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.
                   */
                  logoImageId?: string;
                  /**
                   * Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.
                   */
                  pinMailer?: string;
                  /**
                   * Overrides the logistics company defined in the `configurationProfileId`.
                   */
                  shipmentMethod?: string;
                  [k: string]: unknown;
                };
                /**
                 * The CVC2 value of the card.
                 * > The CVC2 is not sent by default. This is only returned in the `POST` response for single-use virtual cards.
                 */
                cvc?: string;
                deliveryContact?: {
                  address?: {
                    /**
                     * The name of the city. Maximum length: 3000 characters.
                     */
                    city: string;
                    /**
                     * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
                     * > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
                     */
                    country: string;
                    /**
                     * The number or name of the house. Maximum length: 3000 characters.
                     */
                    houseNumberOrName: string;
                    /**
                     * A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
                     */
                    postalCode: string;
                    /**
                     * The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
                     * > Required for the US and Canada.
                     */
                    stateOrProvince?: string;
                    /**
                     * The name of the street. Maximum length: 3000 characters.
                     * > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
                     */
                    street: string;
                    [k: string]: unknown;
                  };
                  /**
                   * The e-mail address of the contact.
                   */
                  email?: string;
                  /**
                   * The phone number of the contact provided as a single string.  It will be handled as a landline phone.
                   * **Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
                   */
                  fullPhoneNumber?: string;
                  name?: {
                    /**
                     * The first name.
                     */
                    firstName: string;
                    /**
                     * The last name.
                     */
                    lastName: string;
                    [k: string]: unknown;
                  };
                  personalData?: {
                    /**
                     * The date of birth of the person.
                     * The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
                     */
                    dateOfBirth?: string;
                    /**
                     * An ID number of the person.
                     */
                    idNumber?: string;
                    /**
                     * The nationality of the person represented by a two-character country code.
                     * >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
                     */
                    nationality?: string;
                    [k: string]: unknown;
                  };
                  phoneNumber?: {
                    /**
                     * The two-character ISO-3166-1 alpha-2 country code of the phone number.
                     * For example, **US** or **NL**.
                     */
                    phoneCountryCode?: string;
                    /**
                     * The phone number.
                     * The inclusion of the phone number country code is not necessary.
                     */
                    phoneNumber?: string;
                    /**
                     * The type of the phone number.
                     * Possible values: **Landline**, **Mobile**, **SIP**, **Fax**.
                     */
                    phoneType?: "Fax" | "Landline" | "Mobile" | "SIP";
                    [k: string]: unknown;
                  };
                  /**
                   * The URL of the website of the contact.
                   */
                  webAddress?: string;
                  [k: string]: unknown;
                };
                expiration?: {
                  /**
                   * The month in which the card will expire.
                   */
                  month?: string;
                  /**
                   * The year in which the card will expire.
                   */
                  year?: string;
                  [k: string]: unknown;
                };
                /**
                 * The form factor of the card.
                 * Possible values: **virtual**, **physical**.
                 */
                formFactor: "physical" | "unknown" | "virtual";
                /**
                 * Last last four digits of the card number.
                 */
                lastFour?: string;
                /**
                 * The primary account number (PAN) of the card.
                 * > The PAN is masked by default and returned only for single-use virtual cards.
                 */
                number: string;
                [k: string]: unknown;
              };
              /**
               * Your description for the payment instrument, maximum 300 characters.
               */
              description?: string;
              /**
               * The unique identifier of the payment instrument.
               */
              id: string;
              /**
               * The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.
               */
              issuingCountryCode: string;
              /**
               * The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.
               */
              paymentInstrumentGroupId?: string;
              /**
               * Your reference for the payment instrument, maximum 150 characters.
               */
              reference?: string;
              /**
               * The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.
               *
               * Possible values:
               *
               *  * **Active**:  The payment instrument is active and can be used to make payments.
               *
               *  * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.
               *
               * * **Inactive**: The payment instrument is inactive and cannot be used to make payments.
               *
               *  * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.
               *
               *  * **Closed**: The payment instrument is permanently closed. This action cannot be undone.
               *
               * * **Stolen**
               *
               *  * **Lost**
               *
               *
               */
              status?:
                | "Active"
                | "Closed"
                | "Inactive"
                | "Lost"
                | "Requested"
                | "Stolen"
                | "Suspended"
                | "blocked"
                | "discarded";
              /**
               * Type of payment instrument.
               *
               * Possible value: **card**, **bankAccount**.
               */
              type: "bankAccount" | "card";
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * The environment from which the webhook originated.
           *
           * Possible values: **test**, **live**.
           */
          environment: string;
          /**
           * Type of notification.
           */
          type: "balancePlatform.paymentInstrument.created" | "balancePlatform.paymentInstrument.updated";
          [k: string]: unknown;
        };
      };
      responses: {
        status: "200";
        headers: {
          "Content-Type": "application/json";
          [k: string]: unknown;
        };
        body: {
          /**
           * Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).
           */
          notificationResponse?: string;
          [k: string]: unknown;
        };
      };
    };
  };
  "balancePlatform.paymentInstrument.updated": {
    post: {
      request: {
        path?: {};
        headers?: {
          "Content-Type"?: "application/json";
          [k: string]: unknown;
        };
        cookies?: {
          [k: string]: unknown;
        };
        query?: {
          [k: string]: unknown;
        };
        body?: {
          data: {
            /**
             * The unique identifier of the balance platform.
             */
            balancePlatform?: string;
            paymentInstrument?: {
              /**
               * The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.
               */
              balanceAccountId: string;
              /**
               * Contains the business account details. Returned when you create a payment instrument with `type` **bankAccount**.
               */
              bankAccount?:
                | {
                    /**
                     * The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.
                     */
                    iban: string;
                    /**
                     * **iban**
                     */
                    type: "iban";
                  }
                | {
                    /**
                     * The bank account number, without separators or whitespace.
                     */
                    accountNumber: string;
                    /**
                     * The bank account type.
                     *
                     * Possible values: **checking** or **savings**. Defaults to **checking**.
                     */
                    accountType?: "checking" | "savings";
                    /**
                     * The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.
                     */
                    routingNumber: string;
                    /**
                     * **usLocal**
                     */
                    type: "usLocal";
                  };
              card?: {
                authentication?: {
                  /**
                   * The email address where the one-time password (OTP) is sent.
                   */
                  email?: string;
                  /**
                   * The password used for 3D Secure password-based authentication. The value must be between 1 to 30 characters and must only contain the following supported characters.
                   *
                   * * Characters between **a-z**, **A-Z**, and **0-9**
                   *
                   * * Special characters: **äöüßÄÖÜ+-* /ç%()=?!~#'",;:$&àùòâôûáúó**
                   */
                  password?: string;
                  phone?: {
                    /**
                     * The full phone number provided as a single string.
                     * For example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**,
                     *
                     *  or **"(0031) 611223344"**.
                     */
                    number: string;
                    /**
                     * Type of phone number.
                     * Possible values:
                     * **Landline**, **Mobile**.
                     *
                     */
                    type: "Landline" | "Mobile";
                    [k: string]: unknown;
                  };
                  [k: string]: unknown;
                };
                /**
                 * The bank identification number (BIN) of the card number.
                 */
                bin?: string;
                /**
                 * The brand of the physical or the virtual card.
                 * Possible values: **visa**, **mc**.
                 */
                brand: string;
                /**
                 * The brand variant of the physical or the virtual card.
                 * >Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.
                 */
                brandVariant: string;
                /**
                 * The name of the cardholder.
                 *  Maximum length: 26 characters.
                 */
                cardholderName: string;
                configuration?: {
                  /**
                   * Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions.
                   */
                  activation?: string;
                  /**
                   * Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process.
                   *
                   * Maximum length: 255 characters.
                   */
                  activationUrl?: string;
                  bulkAddress?: {
                    /**
                     * The name of the city.
                     */
                    city?: string;
                    /**
                     * The name of the company.
                     */
                    company?: string;
                    /**
                     * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
                     */
                    country: string;
                    /**
                     * The email address.
                     */
                    email?: string;
                    /**
                     * The house number or name.
                     */
                    houseNumberOrName?: string;
                    /**
                     * The full telephone number.
                     */
                    mobile?: string;
                    /**
                     * The postal code.
                     *
                     * Maximum length:
                     *
                     * * 5 digits for addresses in the US.
                     *
                     * * 10 characters for all other countries.
                     */
                    postalCode?: string;
                    /**
                     * The two-letter ISO 3166-2 state or province code.
                     *
                     * Maximum length: 2 characters for addresses in the US.
                     */
                    stateOrProvince?: string;
                    /**
                     * The streetname of the house.
                     */
                    street?: string;
                    [k: string]: unknown;
                  };
                  /**
                   * The ID of the card image. This is the image that will be printed on the full front of the card.
                   */
                  cardImageId?: string;
                  /**
                   * Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.
                   */
                  carrier?: string;
                  /**
                   * The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.
                   */
                  carrierImageId?: string;
                  /**
                   * The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.
                   *
                   * For example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.
                   */
                  configurationProfileId: string;
                  /**
                   * The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**.
                   */
                  currency?: string;
                  /**
                   * Overrides the envelope design ID defined in the `configurationProfileId`.
                   */
                  envelope?: string;
                  /**
                   * Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.
                   */
                  insert?: string;
                  /**
                   * The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**.
                   */
                  language?: string;
                  /**
                   * The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.
                   */
                  logoImageId?: string;
                  /**
                   * Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.
                   */
                  pinMailer?: string;
                  /**
                   * Overrides the logistics company defined in the `configurationProfileId`.
                   */
                  shipmentMethod?: string;
                  [k: string]: unknown;
                };
                /**
                 * The CVC2 value of the card.
                 * > The CVC2 is not sent by default. This is only returned in the `POST` response for single-use virtual cards.
                 */
                cvc?: string;
                deliveryContact?: {
                  address?: {
                    /**
                     * The name of the city. Maximum length: 3000 characters.
                     */
                    city: string;
                    /**
                     * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
                     * > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
                     */
                    country: string;
                    /**
                     * The number or name of the house. Maximum length: 3000 characters.
                     */
                    houseNumberOrName: string;
                    /**
                     * A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
                     */
                    postalCode: string;
                    /**
                     * The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
                     * > Required for the US and Canada.
                     */
                    stateOrProvince?: string;
                    /**
                     * The name of the street. Maximum length: 3000 characters.
                     * > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
                     */
                    street: string;
                    [k: string]: unknown;
                  };
                  /**
                   * The e-mail address of the contact.
                   */
                  email?: string;
                  /**
                   * The phone number of the contact provided as a single string.  It will be handled as a landline phone.
                   * **Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
                   */
                  fullPhoneNumber?: string;
                  name?: {
                    /**
                     * The first name.
                     */
                    firstName: string;
                    /**
                     * The last name.
                     */
                    lastName: string;
                    [k: string]: unknown;
                  };
                  personalData?: {
                    /**
                     * The date of birth of the person.
                     * The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
                     */
                    dateOfBirth?: string;
                    /**
                     * An ID number of the person.
                     */
                    idNumber?: string;
                    /**
                     * The nationality of the person represented by a two-character country code.
                     * >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
                     */
                    nationality?: string;
                    [k: string]: unknown;
                  };
                  phoneNumber?: {
                    /**
                     * The two-character ISO-3166-1 alpha-2 country code of the phone number.
                     * For example, **US** or **NL**.
                     */
                    phoneCountryCode?: string;
                    /**
                     * The phone number.
                     * The inclusion of the phone number country code is not necessary.
                     */
                    phoneNumber?: string;
                    /**
                     * The type of the phone number.
                     * Possible values: **Landline**, **Mobile**, **SIP**, **Fax**.
                     */
                    phoneType?: "Fax" | "Landline" | "Mobile" | "SIP";
                    [k: string]: unknown;
                  };
                  /**
                   * The URL of the website of the contact.
                   */
                  webAddress?: string;
                  [k: string]: unknown;
                };
                expiration?: {
                  /**
                   * The month in which the card will expire.
                   */
                  month?: string;
                  /**
                   * The year in which the card will expire.
                   */
                  year?: string;
                  [k: string]: unknown;
                };
                /**
                 * The form factor of the card.
                 * Possible values: **virtual**, **physical**.
                 */
                formFactor: "physical" | "unknown" | "virtual";
                /**
                 * Last last four digits of the card number.
                 */
                lastFour?: string;
                /**
                 * The primary account number (PAN) of the card.
                 * > The PAN is masked by default and returned only for single-use virtual cards.
                 */
                number: string;
                [k: string]: unknown;
              };
              /**
               * Your description for the payment instrument, maximum 300 characters.
               */
              description?: string;
              /**
               * The unique identifier of the payment instrument.
               */
              id: string;
              /**
               * The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.
               */
              issuingCountryCode: string;
              /**
               * The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.
               */
              paymentInstrumentGroupId?: string;
              /**
               * Your reference for the payment instrument, maximum 150 characters.
               */
              reference?: string;
              /**
               * The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.
               *
               * Possible values:
               *
               *  * **Active**:  The payment instrument is active and can be used to make payments.
               *
               *  * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.
               *
               * * **Inactive**: The payment instrument is inactive and cannot be used to make payments.
               *
               *  * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.
               *
               *  * **Closed**: The payment instrument is permanently closed. This action cannot be undone.
               *
               * * **Stolen**
               *
               *  * **Lost**
               *
               *
               */
              status?:
                | "Active"
                | "Closed"
                | "Inactive"
                | "Lost"
                | "Requested"
                | "Stolen"
                | "Suspended"
                | "blocked"
                | "discarded";
              /**
               * Type of payment instrument.
               *
               * Possible value: **card**, **bankAccount**.
               */
              type: "bankAccount" | "card";
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * The environment from which the webhook originated.
           *
           * Possible values: **test**, **live**.
           */
          environment: string;
          /**
           * Type of notification.
           */
          type: "balancePlatform.paymentInstrument.created" | "balancePlatform.paymentInstrument.updated";
          [k: string]: unknown;
        };
      };
      responses: {
        status: "200";
        headers: {
          "Content-Type": "application/json";
          [k: string]: unknown;
        };
        body: {
          /**
           * Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).
           */
          notificationResponse?: string;
          [k: string]: unknown;
        };
      };
    };
  };
}

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface Components {
  schemas: {
    AccountHolder: {
      /**
       * The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.
       */
      balancePlatform?: string;
      /**
       * Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.
       */
      capabilities?: {
        [k: string]: {
          /**
           * Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
           */
          allowed?: boolean;
          /**
           * The capability level that is allowed for the account holder.
           *
           * Possible values: **notApplicable**, **low**, **medium**, **high**.
           */
          allowedLevel?: "high" | "low" | "medium" | "notApplicable";
          allowedSettings?: {
            paths?: {
              content?: string[];
              [k: string]: unknown;
            }[];
            rootPath?: {
              content?: string[];
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
           */
          enabled?: boolean;
          /**
           * Contains verification errors and the actions that you can take to resolve them.
           */
          problems?: {
            [k: string]: unknown;
          }[];
          /**
           * Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
           */
          requested?: boolean;
          /**
           * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
           *
           * Possible values: **notApplicable**, **low**, **medium**, **high**.
           */
          requestedLevel?: "high" | "low" | "medium" | "notApplicable";
          requestedSettings?: {
            paths?: {
              content?: string[];
              [k: string]: unknown;
            }[];
            rootPath?: {
              content?: string[];
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Contains the status of the transfer instruments associated with this capability.
           */
          transferInstruments?: {
            /**
             * Indicates whether the supporting entity capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
             */
            allowed?: boolean;
            /**
             * The capability level that is allowed for the account holder.
             *
             * Possible values: **notApplicable**, **low**, **medium**, **high**.
             */
            allowedLevel?: "high" | "low" | "medium" | "notApplicable";
            /**
             * Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
             */
            enabled?: boolean;
            /**
             * The ID of the supporting entity.
             */
            id?: string;
            /**
             * Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
             */
            requested?: boolean;
            /**
             * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
             *
             * Possible values: **notApplicable**, **low**, **medium**, **high**.
             */
            requestedLevel?: "high" | "low" | "medium" | "notApplicable";
            /**
             * The status of the verification checks for the supporting entity capability.
             *
             * Possible values:
             *
             * * **pending**: Adyen is running the verification.
             *
             * * **invalid**: The verification failed. Check if the `errors` array contains more information.
             *
             * * **valid**: The verification has been successfully completed.
             *
             * * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
             *
             */
            verificationStatus?: "invalid" | "pending" | "rejected" | "valid";
            [k: string]: unknown;
          }[];
          /**
           * The status of the verification checks for the capability.
           *
           * Possible values:
           *
           * * **pending**: Adyen is running the verification.
           *
           * * **invalid**: The verification failed. Check if the `errors` array contains more information.
           *
           * * **valid**: The verification has been successfully completed.
           *
           * * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
           *
           */
          verificationStatus?: "invalid" | "pending" | "rejected" | "valid";
          [k: string]: unknown;
        };
      };
      contactDetails?: {
        address: {
          /**
           * The name of the city. Maximum length: 3000 characters.
           */
          city: string;
          /**
           * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
           * > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
           */
          country: string;
          /**
           * The number or name of the house. Maximum length: 3000 characters.
           */
          houseNumberOrName: string;
          /**
           * A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
           */
          postalCode: string;
          /**
           * The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
           * > Required for the US and Canada.
           */
          stateOrProvince?: string;
          /**
           * The name of the street. Maximum length: 3000 characters.
           * > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
           */
          street: string;
          [k: string]: unknown;
        };
        /**
         * The email address of the account holder.
         */
        email: string;
        phone: {
          /**
           * The full phone number provided as a single string.
           * For example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**,
           *
           *  or **"(0031) 611223344"**.
           */
          number: string;
          /**
           * Type of phone number.
           * Possible values:
           * **Landline**, **Mobile**.
           *
           */
          type: "Landline" | "Mobile";
          [k: string]: unknown;
        };
        /**
         * The URL of the account holder's website.
         */
        webAddress?: string;
        [k: string]: unknown;
      };
      /**
       * Your description for the account holder, maximum 300 characters.
       */
      description?: string;
      /**
       * The unique identifier of the account holder.
       */
      id: string;
      /**
       * The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.
       */
      legalEntityId: string;
      /**
       * The ID of the account holder's primary balance account. By default, this is set to the first balance account that you create for the account holder. To assign a different balance account, send a PATCH request.
       */
      primaryBalanceAccount?: string;
      /**
       * Your reference for the account holder, maximum 150 characters.
       */
      reference?: string;
      /**
       * The status of the account holder.
       *
       * Possible values:
       *
       *  * **Active**: The account holder is active. This is the default status when creating an account holder.
       *
       *  * **Inactive (Deprecated)**: The account holder is temporarily inactive due to missing KYC details. You can set the account back to active by providing the missing KYC details.
       *
       *  * **Suspended**: The account holder is permanently deactivated by Adyen. This action cannot be undone.
       *
       * * **Closed**: The account holder is permanently deactivated by you. This action cannot be undone.
       */
      status?: "Active" | "Closed" | "Inactive" | "Suspended";
      /**
       * The [time zone](https://www.iana.org/time-zones) of the account holder. For example, **Europe/Amsterdam**.
       * Defaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
       */
      timeZone?: string;
      [k: string]: unknown;
    };
    AccountHolderCapability: {
      /**
       * Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
       */
      allowed?: boolean;
      /**
       * The capability level that is allowed for the account holder.
       *
       * Possible values: **notApplicable**, **low**, **medium**, **high**.
       */
      allowedLevel?: "high" | "low" | "medium" | "notApplicable";
      allowedSettings?: {
        paths?: {
          content?: string[];
          [k: string]: unknown;
        }[];
        rootPath?: {
          content?: string[];
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      /**
       * Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
       */
      enabled?: boolean;
      /**
       * Contains verification errors and the actions that you can take to resolve them.
       */
      problems?: {
        [k: string]: unknown;
      }[];
      /**
       * Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
       */
      requested?: boolean;
      /**
       * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
       *
       * Possible values: **notApplicable**, **low**, **medium**, **high**.
       */
      requestedLevel?: "high" | "low" | "medium" | "notApplicable";
      requestedSettings?: {
        paths?: {
          content?: string[];
          [k: string]: unknown;
        }[];
        rootPath?: {
          content?: string[];
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      /**
       * Contains the status of the transfer instruments associated with this capability.
       */
      transferInstruments?: {
        /**
         * Indicates whether the supporting entity capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
         */
        allowed?: boolean;
        /**
         * The capability level that is allowed for the account holder.
         *
         * Possible values: **notApplicable**, **low**, **medium**, **high**.
         */
        allowedLevel?: "high" | "low" | "medium" | "notApplicable";
        /**
         * Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
         */
        enabled?: boolean;
        /**
         * The ID of the supporting entity.
         */
        id?: string;
        /**
         * Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
         */
        requested?: boolean;
        /**
         * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
         *
         * Possible values: **notApplicable**, **low**, **medium**, **high**.
         */
        requestedLevel?: "high" | "low" | "medium" | "notApplicable";
        /**
         * The status of the verification checks for the supporting entity capability.
         *
         * Possible values:
         *
         * * **pending**: Adyen is running the verification.
         *
         * * **invalid**: The verification failed. Check if the `errors` array contains more information.
         *
         * * **valid**: The verification has been successfully completed.
         *
         * * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
         *
         */
        verificationStatus?: "invalid" | "pending" | "rejected" | "valid";
        [k: string]: unknown;
      }[];
      /**
       * The status of the verification checks for the capability.
       *
       * Possible values:
       *
       * * **pending**: Adyen is running the verification.
       *
       * * **invalid**: The verification failed. Check if the `errors` array contains more information.
       *
       * * **valid**: The verification has been successfully completed.
       *
       * * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
       *
       */
      verificationStatus?: "invalid" | "pending" | "rejected" | "valid";
      [k: string]: unknown;
    };
    AccountHolderNotificationData: {
      accountHolder?: {
        /**
         * The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.
         */
        balancePlatform?: string;
        /**
         * Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.
         */
        capabilities?: {
          [k: string]: {
            /**
             * Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
             */
            allowed?: boolean;
            /**
             * The capability level that is allowed for the account holder.
             *
             * Possible values: **notApplicable**, **low**, **medium**, **high**.
             */
            allowedLevel?: "high" | "low" | "medium" | "notApplicable";
            allowedSettings?: {
              paths?: {
                content?: string[];
                [k: string]: unknown;
              }[];
              rootPath?: {
                content?: string[];
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
             */
            enabled?: boolean;
            /**
             * Contains verification errors and the actions that you can take to resolve them.
             */
            problems?: {
              [k: string]: unknown;
            }[];
            /**
             * Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
             */
            requested?: boolean;
            /**
             * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
             *
             * Possible values: **notApplicable**, **low**, **medium**, **high**.
             */
            requestedLevel?: "high" | "low" | "medium" | "notApplicable";
            requestedSettings?: {
              paths?: {
                content?: string[];
                [k: string]: unknown;
              }[];
              rootPath?: {
                content?: string[];
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Contains the status of the transfer instruments associated with this capability.
             */
            transferInstruments?: {
              /**
               * Indicates whether the supporting entity capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
               */
              allowed?: boolean;
              /**
               * The capability level that is allowed for the account holder.
               *
               * Possible values: **notApplicable**, **low**, **medium**, **high**.
               */
              allowedLevel?: "high" | "low" | "medium" | "notApplicable";
              /**
               * Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
               */
              enabled?: boolean;
              /**
               * The ID of the supporting entity.
               */
              id?: string;
              /**
               * Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
               */
              requested?: boolean;
              /**
               * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
               *
               * Possible values: **notApplicable**, **low**, **medium**, **high**.
               */
              requestedLevel?: "high" | "low" | "medium" | "notApplicable";
              /**
               * The status of the verification checks for the supporting entity capability.
               *
               * Possible values:
               *
               * * **pending**: Adyen is running the verification.
               *
               * * **invalid**: The verification failed. Check if the `errors` array contains more information.
               *
               * * **valid**: The verification has been successfully completed.
               *
               * * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
               *
               */
              verificationStatus?: "invalid" | "pending" | "rejected" | "valid";
              [k: string]: unknown;
            }[];
            /**
             * The status of the verification checks for the capability.
             *
             * Possible values:
             *
             * * **pending**: Adyen is running the verification.
             *
             * * **invalid**: The verification failed. Check if the `errors` array contains more information.
             *
             * * **valid**: The verification has been successfully completed.
             *
             * * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
             *
             */
            verificationStatus?: "invalid" | "pending" | "rejected" | "valid";
            [k: string]: unknown;
          };
        };
        contactDetails?: {
          address: {
            /**
             * The name of the city. Maximum length: 3000 characters.
             */
            city: string;
            /**
             * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
             * > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
             */
            country: string;
            /**
             * The number or name of the house. Maximum length: 3000 characters.
             */
            houseNumberOrName: string;
            /**
             * A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
             */
            postalCode: string;
            /**
             * The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
             * > Required for the US and Canada.
             */
            stateOrProvince?: string;
            /**
             * The name of the street. Maximum length: 3000 characters.
             * > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
             */
            street: string;
            [k: string]: unknown;
          };
          /**
           * The email address of the account holder.
           */
          email: string;
          phone: {
            /**
             * The full phone number provided as a single string.
             * For example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**,
             *
             *  or **"(0031) 611223344"**.
             */
            number: string;
            /**
             * Type of phone number.
             * Possible values:
             * **Landline**, **Mobile**.
             *
             */
            type: "Landline" | "Mobile";
            [k: string]: unknown;
          };
          /**
           * The URL of the account holder's website.
           */
          webAddress?: string;
          [k: string]: unknown;
        };
        /**
         * Your description for the account holder, maximum 300 characters.
         */
        description?: string;
        /**
         * The unique identifier of the account holder.
         */
        id: string;
        /**
         * The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.
         */
        legalEntityId: string;
        /**
         * The ID of the account holder's primary balance account. By default, this is set to the first balance account that you create for the account holder. To assign a different balance account, send a PATCH request.
         */
        primaryBalanceAccount?: string;
        /**
         * Your reference for the account holder, maximum 150 characters.
         */
        reference?: string;
        /**
         * The status of the account holder.
         *
         * Possible values:
         *
         *  * **Active**: The account holder is active. This is the default status when creating an account holder.
         *
         *  * **Inactive (Deprecated)**: The account holder is temporarily inactive due to missing KYC details. You can set the account back to active by providing the missing KYC details.
         *
         *  * **Suspended**: The account holder is permanently deactivated by Adyen. This action cannot be undone.
         *
         * * **Closed**: The account holder is permanently deactivated by you. This action cannot be undone.
         */
        status?: "Active" | "Closed" | "Inactive" | "Suspended";
        /**
         * The [time zone](https://www.iana.org/time-zones) of the account holder. For example, **Europe/Amsterdam**.
         * Defaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
         */
        timeZone?: string;
        [k: string]: unknown;
      };
      /**
       * The unique identifier of the balance platform.
       */
      balancePlatform?: string;
      [k: string]: unknown;
    };
    AccountHolderNotificationRequest: {
      data: {
        accountHolder?: {
          /**
           * The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.
           */
          balancePlatform?: string;
          /**
           * Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.
           */
          capabilities?: {
            [k: string]: {
              /**
               * Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
               */
              allowed?: boolean;
              /**
               * The capability level that is allowed for the account holder.
               *
               * Possible values: **notApplicable**, **low**, **medium**, **high**.
               */
              allowedLevel?: "high" | "low" | "medium" | "notApplicable";
              allowedSettings?: {
                paths?: {
                  content?: string[];
                  [k: string]: unknown;
                }[];
                rootPath?: {
                  content?: string[];
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
               */
              enabled?: boolean;
              /**
               * Contains verification errors and the actions that you can take to resolve them.
               */
              problems?: {
                [k: string]: unknown;
              }[];
              /**
               * Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
               */
              requested?: boolean;
              /**
               * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
               *
               * Possible values: **notApplicable**, **low**, **medium**, **high**.
               */
              requestedLevel?: "high" | "low" | "medium" | "notApplicable";
              requestedSettings?: {
                paths?: {
                  content?: string[];
                  [k: string]: unknown;
                }[];
                rootPath?: {
                  content?: string[];
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * Contains the status of the transfer instruments associated with this capability.
               */
              transferInstruments?: {
                /**
                 * Indicates whether the supporting entity capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
                 */
                allowed?: boolean;
                /**
                 * The capability level that is allowed for the account holder.
                 *
                 * Possible values: **notApplicable**, **low**, **medium**, **high**.
                 */
                allowedLevel?: "high" | "low" | "medium" | "notApplicable";
                /**
                 * Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
                 */
                enabled?: boolean;
                /**
                 * The ID of the supporting entity.
                 */
                id?: string;
                /**
                 * Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
                 */
                requested?: boolean;
                /**
                 * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
                 *
                 * Possible values: **notApplicable**, **low**, **medium**, **high**.
                 */
                requestedLevel?: "high" | "low" | "medium" | "notApplicable";
                /**
                 * The status of the verification checks for the supporting entity capability.
                 *
                 * Possible values:
                 *
                 * * **pending**: Adyen is running the verification.
                 *
                 * * **invalid**: The verification failed. Check if the `errors` array contains more information.
                 *
                 * * **valid**: The verification has been successfully completed.
                 *
                 * * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
                 *
                 */
                verificationStatus?: "invalid" | "pending" | "rejected" | "valid";
                [k: string]: unknown;
              }[];
              /**
               * The status of the verification checks for the capability.
               *
               * Possible values:
               *
               * * **pending**: Adyen is running the verification.
               *
               * * **invalid**: The verification failed. Check if the `errors` array contains more information.
               *
               * * **valid**: The verification has been successfully completed.
               *
               * * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
               *
               */
              verificationStatus?: "invalid" | "pending" | "rejected" | "valid";
              [k: string]: unknown;
            };
          };
          contactDetails?: {
            address: {
              /**
               * The name of the city. Maximum length: 3000 characters.
               */
              city: string;
              /**
               * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
               * > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
               */
              country: string;
              /**
               * The number or name of the house. Maximum length: 3000 characters.
               */
              houseNumberOrName: string;
              /**
               * A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
               */
              postalCode: string;
              /**
               * The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
               * > Required for the US and Canada.
               */
              stateOrProvince?: string;
              /**
               * The name of the street. Maximum length: 3000 characters.
               * > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
               */
              street: string;
              [k: string]: unknown;
            };
            /**
             * The email address of the account holder.
             */
            email: string;
            phone: {
              /**
               * The full phone number provided as a single string.
               * For example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**,
               *
               *  or **"(0031) 611223344"**.
               */
              number: string;
              /**
               * Type of phone number.
               * Possible values:
               * **Landline**, **Mobile**.
               *
               */
              type: "Landline" | "Mobile";
              [k: string]: unknown;
            };
            /**
             * The URL of the account holder's website.
             */
            webAddress?: string;
            [k: string]: unknown;
          };
          /**
           * Your description for the account holder, maximum 300 characters.
           */
          description?: string;
          /**
           * The unique identifier of the account holder.
           */
          id: string;
          /**
           * The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.
           */
          legalEntityId: string;
          /**
           * The ID of the account holder's primary balance account. By default, this is set to the first balance account that you create for the account holder. To assign a different balance account, send a PATCH request.
           */
          primaryBalanceAccount?: string;
          /**
           * Your reference for the account holder, maximum 150 characters.
           */
          reference?: string;
          /**
           * The status of the account holder.
           *
           * Possible values:
           *
           *  * **Active**: The account holder is active. This is the default status when creating an account holder.
           *
           *  * **Inactive (Deprecated)**: The account holder is temporarily inactive due to missing KYC details. You can set the account back to active by providing the missing KYC details.
           *
           *  * **Suspended**: The account holder is permanently deactivated by Adyen. This action cannot be undone.
           *
           * * **Closed**: The account holder is permanently deactivated by you. This action cannot be undone.
           */
          status?: "Active" | "Closed" | "Inactive" | "Suspended";
          /**
           * The [time zone](https://www.iana.org/time-zones) of the account holder. For example, **Europe/Amsterdam**.
           * Defaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
           */
          timeZone?: string;
          [k: string]: unknown;
        };
        /**
         * The unique identifier of the balance platform.
         */
        balancePlatform?: string;
        [k: string]: unknown;
      };
      /**
       * The environment from which the webhook originated.
       *
       * Possible values: **test**, **live**.
       */
      environment: string;
      /**
       * Type of notification.
       */
      type: "balancePlatform.accountHolder.updated" | "balancePlatform.accountHolder.created";
      [k: string]: unknown;
    };
    AccountSupportingEntityCapability: {
      /**
       * Indicates whether the supporting entity capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.
       */
      allowed?: boolean;
      /**
       * The capability level that is allowed for the account holder.
       *
       * Possible values: **notApplicable**, **low**, **medium**, **high**.
       */
      allowedLevel?: "high" | "low" | "medium" | "notApplicable";
      /**
       * Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.
       */
      enabled?: boolean;
      /**
       * The ID of the supporting entity.
       */
      id?: string;
      /**
       * Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.
       */
      requested?: boolean;
      /**
       * The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.
       *
       * Possible values: **notApplicable**, **low**, **medium**, **high**.
       */
      requestedLevel?: "high" | "low" | "medium" | "notApplicable";
      /**
       * The status of the verification checks for the supporting entity capability.
       *
       * Possible values:
       *
       * * **pending**: Adyen is running the verification.
       *
       * * **invalid**: The verification failed. Check if the `errors` array contains more information.
       *
       * * **valid**: The verification has been successfully completed.
       *
       * * **rejected**: Adyen has verified the information, but found reasons to not allow the capability.
       *
       */
      verificationStatus?: "invalid" | "pending" | "rejected" | "valid";
      [k: string]: unknown;
    };
    Address: {
      /**
       * The name of the city. Maximum length: 3000 characters.
       */
      city: string;
      /**
       * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
       * > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
       */
      country: string;
      /**
       * The number or name of the house. Maximum length: 3000 characters.
       */
      houseNumberOrName: string;
      /**
       * A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
       */
      postalCode: string;
      /**
       * The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
       * > Required for the US and Canada.
       */
      stateOrProvince?: string;
      /**
       * The name of the street. Maximum length: 3000 characters.
       * > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
       */
      street: string;
      [k: string]: unknown;
    };
    Amount: {
      /**
       * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
       */
      currency: string;
      /**
       * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
       */
      value: number;
      [k: string]: unknown;
    };
    Authentication: {
      /**
       * The email address where the one-time password (OTP) is sent.
       */
      email?: string;
      /**
       * The password used for 3D Secure password-based authentication. The value must be between 1 to 30 characters and must only contain the following supported characters.
       *
       * * Characters between **a-z**, **A-Z**, and **0-9**
       *
       * * Special characters: **äöüßÄÖÜ+-* /ç%()=?!~#'",;:$&àùòâôûáúó**
       */
      password?: string;
      phone?: {
        /**
         * The full phone number provided as a single string.
         * For example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**,
         *
         *  or **"(0031) 611223344"**.
         */
        number: string;
        /**
         * Type of phone number.
         * Possible values:
         * **Landline**, **Mobile**.
         *
         */
        type: "Landline" | "Mobile";
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    Balance: {
      /**
       * The remaining amount available for spending.
       */
      available: number;
      /**
       * The total amount in the balance.
       */
      balance: number;
      /**
       * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance.
       */
      currency: string;
      /**
       * The amount reserved for payments that have been authorised, but have not been captured yet.
       */
      reserved: number;
      [k: string]: unknown;
    };
    BalanceAccount: {
      /**
       * The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.
       */
      accountHolderId: string;
      /**
       * List of balances with the amount and currency.
       */
      balances?: {
        /**
         * The remaining amount available for spending.
         */
        available: number;
        /**
         * The total amount in the balance.
         */
        balance: number;
        /**
         * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance.
         */
        currency: string;
        /**
         * The amount reserved for payments that have been authorised, but have not been captured yet.
         */
        reserved: number;
        [k: string]: unknown;
      }[];
      /**
       * The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account.
       * The default value is **EUR**.
       */
      defaultCurrencyCode?: string;
      /**
       * A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.
       */
      description?: string;
      /**
       * The unique identifier of the balance account.
       */
      id: string;
      /**
       * List of [payment instruments](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments) associated with the balance account.
       */
      paymentInstruments?: {
        /**
         * The unique identifier of the payment instrument.
         */
        id: string;
        [k: string]: unknown;
      }[];
      /**
       * Your reference for the balance account, maximum 150 characters.
       */
      reference?: string;
      /**
       * The status of the balance account, set to **Active** by default.
       *
       */
      status?: "Active" | "Closed" | "Inactive" | "Suspended";
      /**
       * Contains key-value pairs that specify configurations for balance sweeps per currency code. A sweep pulls in or pushes out funds based on a defined schedule, amount, and a source (for pulling funds) or a destination (for pushing funds).
       *
       * The key must be a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**. The value must be an object containing the sweep configuration.
       */
      sweepConfigurations?: {
        [k: string]: {
          /**
           * The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
           *
           *  You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
           */
          balanceAccountId?: string;
          /**
           * The unique identifier of the sweep.
           */
          id: string;
          /**
           * The merchant account that will be the source of funds. You can only use this if you are processing payments with Adyen. This can only be used for sweeps of `type` **pull** and `schedule.type` **balance**.
           */
          merchantAccount?: string;
          /**
           * The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
           */
          schedule:
            | {
                /**
                 * A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.
                 *
                 * The expression must have five values separated by a single space in the following order:
                 *
                 * * Minute: **0-59**
                 *
                 * * Hour: **0-23**
                 *
                 * * Day of the month: **1-31**
                 *
                 * * Month: **1-12** or **JAN-DEC**
                 *
                 * * Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.
                 *
                 * The following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and ** /**. See [crontab guru](https://crontab.guru/) for more examples.
                 */
                cronExpression: string;
                /**
                 * The schedule type.
                 *
                 * Possible values:
                 *
                 * * **cron**: push out funds based on a cron expression.
                 *
                 * * **daily**: push out funds daily at 07:00 AM CET.
                 *
                 * * **weekly**: push out funds every Monday at 07:00 AM CET.
                 *
                 * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                 *
                 * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                 */
                type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
              }
            | {
                /**
                 * The schedule type.
                 *
                 * Possible values:
                 *
                 * * **cron**: push out funds based on a cron expression.
                 *
                 * * **daily**: push out funds daily at 07:00 AM CET.
                 *
                 * * **weekly**: push out funds every Monday at 07:00 AM CET.
                 *
                 * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                 *
                 * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                 */
                type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
              };
          /**
           * The status of the sweep. If not provided, by default, this is set to **active**.
           *
           * Possible values:
           *
           *  * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
           *
           *  * **inactive**: the sweep is disabled and cannot be triggered.
           *
           *
           */
          status?: "active" | "inactive";
          sweepAmount?: {
            /**
             * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
             */
            currency: string;
            /**
             * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
             */
            value: number;
            [k: string]: unknown;
          };
          targetAmount?: {
            /**
             * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
             */
            currency: string;
            /**
             * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
             */
            value: number;
            [k: string]: unknown;
          };
          /**
           * The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).
           *
           * You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.
           */
          transferInstrumentId?: string;
          triggerAmount?: {
            /**
             * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
             */
            currency: string;
            /**
             * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
             */
            value: number;
            [k: string]: unknown;
          };
          /**
           * The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
           *
           * Possible values:
           *
           *  * **push**: _push out funds_ to a destination balance account or transfer instrument.
           *
           *  * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
           */
          type?: "pull" | "push";
          [k: string]: unknown;
        };
      };
      /**
       * The [time zone](https://www.iana.org/time-zones) of the balance account. For example, **Europe/Amsterdam**.
       * Defaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
       */
      timeZone?: string;
      [k: string]: unknown;
    };
    BalanceAccountNotificationData: {
      balanceAccount?: {
        /**
         * The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.
         */
        accountHolderId: string;
        /**
         * List of balances with the amount and currency.
         */
        balances?: {
          /**
           * The remaining amount available for spending.
           */
          available: number;
          /**
           * The total amount in the balance.
           */
          balance: number;
          /**
           * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance.
           */
          currency: string;
          /**
           * The amount reserved for payments that have been authorised, but have not been captured yet.
           */
          reserved: number;
          [k: string]: unknown;
        }[];
        /**
         * The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account.
         * The default value is **EUR**.
         */
        defaultCurrencyCode?: string;
        /**
         * A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.
         */
        description?: string;
        /**
         * The unique identifier of the balance account.
         */
        id: string;
        /**
         * List of [payment instruments](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments) associated with the balance account.
         */
        paymentInstruments?: {
          /**
           * The unique identifier of the payment instrument.
           */
          id: string;
          [k: string]: unknown;
        }[];
        /**
         * Your reference for the balance account, maximum 150 characters.
         */
        reference?: string;
        /**
         * The status of the balance account, set to **Active** by default.
         *
         */
        status?: "Active" | "Closed" | "Inactive" | "Suspended";
        /**
         * Contains key-value pairs that specify configurations for balance sweeps per currency code. A sweep pulls in or pushes out funds based on a defined schedule, amount, and a source (for pulling funds) or a destination (for pushing funds).
         *
         * The key must be a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**. The value must be an object containing the sweep configuration.
         */
        sweepConfigurations?: {
          [k: string]: {
            /**
             * The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
             *
             *  You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
             */
            balanceAccountId?: string;
            /**
             * The unique identifier of the sweep.
             */
            id: string;
            /**
             * The merchant account that will be the source of funds. You can only use this if you are processing payments with Adyen. This can only be used for sweeps of `type` **pull** and `schedule.type` **balance**.
             */
            merchantAccount?: string;
            /**
             * The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
             */
            schedule:
              | {
                  /**
                   * A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.
                   *
                   * The expression must have five values separated by a single space in the following order:
                   *
                   * * Minute: **0-59**
                   *
                   * * Hour: **0-23**
                   *
                   * * Day of the month: **1-31**
                   *
                   * * Month: **1-12** or **JAN-DEC**
                   *
                   * * Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.
                   *
                   * The following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and ** /**. See [crontab guru](https://crontab.guru/) for more examples.
                   */
                  cronExpression: string;
                  /**
                   * The schedule type.
                   *
                   * Possible values:
                   *
                   * * **cron**: push out funds based on a cron expression.
                   *
                   * * **daily**: push out funds daily at 07:00 AM CET.
                   *
                   * * **weekly**: push out funds every Monday at 07:00 AM CET.
                   *
                   * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                   *
                   * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                   */
                  type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
                }
              | {
                  /**
                   * The schedule type.
                   *
                   * Possible values:
                   *
                   * * **cron**: push out funds based on a cron expression.
                   *
                   * * **daily**: push out funds daily at 07:00 AM CET.
                   *
                   * * **weekly**: push out funds every Monday at 07:00 AM CET.
                   *
                   * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                   *
                   * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                   */
                  type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
                };
            /**
             * The status of the sweep. If not provided, by default, this is set to **active**.
             *
             * Possible values:
             *
             *  * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
             *
             *  * **inactive**: the sweep is disabled and cannot be triggered.
             *
             *
             */
            status?: "active" | "inactive";
            sweepAmount?: {
              /**
               * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
               */
              currency: string;
              /**
               * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
               */
              value: number;
              [k: string]: unknown;
            };
            targetAmount?: {
              /**
               * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
               */
              currency: string;
              /**
               * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
               */
              value: number;
              [k: string]: unknown;
            };
            /**
             * The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).
             *
             * You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.
             */
            transferInstrumentId?: string;
            triggerAmount?: {
              /**
               * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
               */
              currency: string;
              /**
               * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
               */
              value: number;
              [k: string]: unknown;
            };
            /**
             * The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
             *
             * Possible values:
             *
             *  * **push**: _push out funds_ to a destination balance account or transfer instrument.
             *
             *  * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
             */
            type?: "pull" | "push";
            [k: string]: unknown;
          };
        };
        /**
         * The [time zone](https://www.iana.org/time-zones) of the balance account. For example, **Europe/Amsterdam**.
         * Defaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
         */
        timeZone?: string;
        [k: string]: unknown;
      };
      /**
       * The unique identifier of the balance platform.
       */
      balancePlatform?: string;
      [k: string]: unknown;
    };
    BalanceAccountNotificationRequest: {
      data: {
        balanceAccount?: {
          /**
           * The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.
           */
          accountHolderId: string;
          /**
           * List of balances with the amount and currency.
           */
          balances?: {
            /**
             * The remaining amount available for spending.
             */
            available: number;
            /**
             * The total amount in the balance.
             */
            balance: number;
            /**
             * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance.
             */
            currency: string;
            /**
             * The amount reserved for payments that have been authorised, but have not been captured yet.
             */
            reserved: number;
            [k: string]: unknown;
          }[];
          /**
           * The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account.
           * The default value is **EUR**.
           */
          defaultCurrencyCode?: string;
          /**
           * A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.
           */
          description?: string;
          /**
           * The unique identifier of the balance account.
           */
          id: string;
          /**
           * List of [payment instruments](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments) associated with the balance account.
           */
          paymentInstruments?: {
            /**
             * The unique identifier of the payment instrument.
             */
            id: string;
            [k: string]: unknown;
          }[];
          /**
           * Your reference for the balance account, maximum 150 characters.
           */
          reference?: string;
          /**
           * The status of the balance account, set to **Active** by default.
           *
           */
          status?: "Active" | "Closed" | "Inactive" | "Suspended";
          /**
           * Contains key-value pairs that specify configurations for balance sweeps per currency code. A sweep pulls in or pushes out funds based on a defined schedule, amount, and a source (for pulling funds) or a destination (for pushing funds).
           *
           * The key must be a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**. The value must be an object containing the sweep configuration.
           */
          sweepConfigurations?: {
            [k: string]: {
              /**
               * The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
               *
               *  You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
               */
              balanceAccountId?: string;
              /**
               * The unique identifier of the sweep.
               */
              id: string;
              /**
               * The merchant account that will be the source of funds. You can only use this if you are processing payments with Adyen. This can only be used for sweeps of `type` **pull** and `schedule.type` **balance**.
               */
              merchantAccount?: string;
              /**
               * The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
               */
              schedule:
                | {
                    /**
                     * A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.
                     *
                     * The expression must have five values separated by a single space in the following order:
                     *
                     * * Minute: **0-59**
                     *
                     * * Hour: **0-23**
                     *
                     * * Day of the month: **1-31**
                     *
                     * * Month: **1-12** or **JAN-DEC**
                     *
                     * * Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.
                     *
                     * The following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and ** /**. See [crontab guru](https://crontab.guru/) for more examples.
                     */
                    cronExpression: string;
                    /**
                     * The schedule type.
                     *
                     * Possible values:
                     *
                     * * **cron**: push out funds based on a cron expression.
                     *
                     * * **daily**: push out funds daily at 07:00 AM CET.
                     *
                     * * **weekly**: push out funds every Monday at 07:00 AM CET.
                     *
                     * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                     *
                     * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                     */
                    type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
                  }
                | {
                    /**
                     * The schedule type.
                     *
                     * Possible values:
                     *
                     * * **cron**: push out funds based on a cron expression.
                     *
                     * * **daily**: push out funds daily at 07:00 AM CET.
                     *
                     * * **weekly**: push out funds every Monday at 07:00 AM CET.
                     *
                     * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                     *
                     * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                     */
                    type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
                  };
              /**
               * The status of the sweep. If not provided, by default, this is set to **active**.
               *
               * Possible values:
               *
               *  * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
               *
               *  * **inactive**: the sweep is disabled and cannot be triggered.
               *
               *
               */
              status?: "active" | "inactive";
              sweepAmount?: {
                /**
                 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                 */
                currency: string;
                /**
                 * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                 */
                value: number;
                [k: string]: unknown;
              };
              targetAmount?: {
                /**
                 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                 */
                currency: string;
                /**
                 * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                 */
                value: number;
                [k: string]: unknown;
              };
              /**
               * The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).
               *
               * You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.
               */
              transferInstrumentId?: string;
              triggerAmount?: {
                /**
                 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
                 */
                currency: string;
                /**
                 * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
                 */
                value: number;
                [k: string]: unknown;
              };
              /**
               * The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
               *
               * Possible values:
               *
               *  * **push**: _push out funds_ to a destination balance account or transfer instrument.
               *
               *  * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
               */
              type?: "pull" | "push";
              [k: string]: unknown;
            };
          };
          /**
           * The [time zone](https://www.iana.org/time-zones) of the balance account. For example, **Europe/Amsterdam**.
           * Defaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
           */
          timeZone?: string;
          [k: string]: unknown;
        };
        /**
         * The unique identifier of the balance platform.
         */
        balancePlatform?: string;
        [k: string]: unknown;
      };
      /**
       * The environment from which the webhook originated.
       *
       * Possible values: **test**, **live**.
       */
      environment: string;
      /**
       * Type of notification.
       */
      type: "balancePlatform.balanceAccount.updated" | "balancePlatform.balanceAccount.created";
      [k: string]: unknown;
    };
    BalancePlatformNotificationResponse: {
      /**
       * Respond with **HTTP 200 OK** and `[accepted]` in the response body to [accept the webhook](https://docs.adyen.com/development-resources/webhooks#accept-notifications).
       */
      notificationResponse?: string;
      [k: string]: unknown;
    };
    BulkAddress: {
      /**
       * The name of the city.
       */
      city?: string;
      /**
       * The name of the company.
       */
      company?: string;
      /**
       * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
       */
      country: string;
      /**
       * The email address.
       */
      email?: string;
      /**
       * The house number or name.
       */
      houseNumberOrName?: string;
      /**
       * The full telephone number.
       */
      mobile?: string;
      /**
       * The postal code.
       *
       * Maximum length:
       *
       * * 5 digits for addresses in the US.
       *
       * * 10 characters for all other countries.
       */
      postalCode?: string;
      /**
       * The two-letter ISO 3166-2 state or province code.
       *
       * Maximum length: 2 characters for addresses in the US.
       */
      stateOrProvince?: string;
      /**
       * The streetname of the house.
       */
      street?: string;
      [k: string]: unknown;
    };
    CapabilityProblem: {
      [k: string]: unknown;
    };
    Card: {
      authentication?: {
        /**
         * The email address where the one-time password (OTP) is sent.
         */
        email?: string;
        /**
         * The password used for 3D Secure password-based authentication. The value must be between 1 to 30 characters and must only contain the following supported characters.
         *
         * * Characters between **a-z**, **A-Z**, and **0-9**
         *
         * * Special characters: **äöüßÄÖÜ+-* /ç%()=?!~#'",;:$&àùòâôûáúó**
         */
        password?: string;
        phone?: {
          /**
           * The full phone number provided as a single string.
           * For example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**,
           *
           *  or **"(0031) 611223344"**.
           */
          number: string;
          /**
           * Type of phone number.
           * Possible values:
           * **Landline**, **Mobile**.
           *
           */
          type: "Landline" | "Mobile";
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      /**
       * The bank identification number (BIN) of the card number.
       */
      bin?: string;
      /**
       * The brand of the physical or the virtual card.
       * Possible values: **visa**, **mc**.
       */
      brand: string;
      /**
       * The brand variant of the physical or the virtual card.
       * >Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.
       */
      brandVariant: string;
      /**
       * The name of the cardholder.
       *  Maximum length: 26 characters.
       */
      cardholderName: string;
      configuration?: {
        /**
         * Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions.
         */
        activation?: string;
        /**
         * Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process.
         *
         * Maximum length: 255 characters.
         */
        activationUrl?: string;
        bulkAddress?: {
          /**
           * The name of the city.
           */
          city?: string;
          /**
           * The name of the company.
           */
          company?: string;
          /**
           * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
           */
          country: string;
          /**
           * The email address.
           */
          email?: string;
          /**
           * The house number or name.
           */
          houseNumberOrName?: string;
          /**
           * The full telephone number.
           */
          mobile?: string;
          /**
           * The postal code.
           *
           * Maximum length:
           *
           * * 5 digits for addresses in the US.
           *
           * * 10 characters for all other countries.
           */
          postalCode?: string;
          /**
           * The two-letter ISO 3166-2 state or province code.
           *
           * Maximum length: 2 characters for addresses in the US.
           */
          stateOrProvince?: string;
          /**
           * The streetname of the house.
           */
          street?: string;
          [k: string]: unknown;
        };
        /**
         * The ID of the card image. This is the image that will be printed on the full front of the card.
         */
        cardImageId?: string;
        /**
         * Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.
         */
        carrier?: string;
        /**
         * The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.
         */
        carrierImageId?: string;
        /**
         * The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.
         *
         * For example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.
         */
        configurationProfileId: string;
        /**
         * The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**.
         */
        currency?: string;
        /**
         * Overrides the envelope design ID defined in the `configurationProfileId`.
         */
        envelope?: string;
        /**
         * Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.
         */
        insert?: string;
        /**
         * The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**.
         */
        language?: string;
        /**
         * The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.
         */
        logoImageId?: string;
        /**
         * Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.
         */
        pinMailer?: string;
        /**
         * Overrides the logistics company defined in the `configurationProfileId`.
         */
        shipmentMethod?: string;
        [k: string]: unknown;
      };
      /**
       * The CVC2 value of the card.
       * > The CVC2 is not sent by default. This is only returned in the `POST` response for single-use virtual cards.
       */
      cvc?: string;
      deliveryContact?: {
        address?: {
          /**
           * The name of the city. Maximum length: 3000 characters.
           */
          city: string;
          /**
           * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
           * > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
           */
          country: string;
          /**
           * The number or name of the house. Maximum length: 3000 characters.
           */
          houseNumberOrName: string;
          /**
           * A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
           */
          postalCode: string;
          /**
           * The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
           * > Required for the US and Canada.
           */
          stateOrProvince?: string;
          /**
           * The name of the street. Maximum length: 3000 characters.
           * > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
           */
          street: string;
          [k: string]: unknown;
        };
        /**
         * The e-mail address of the contact.
         */
        email?: string;
        /**
         * The phone number of the contact provided as a single string.  It will be handled as a landline phone.
         * **Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
         */
        fullPhoneNumber?: string;
        name?: {
          /**
           * The first name.
           */
          firstName: string;
          /**
           * The last name.
           */
          lastName: string;
          [k: string]: unknown;
        };
        personalData?: {
          /**
           * The date of birth of the person.
           * The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
           */
          dateOfBirth?: string;
          /**
           * An ID number of the person.
           */
          idNumber?: string;
          /**
           * The nationality of the person represented by a two-character country code.
           * >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
           */
          nationality?: string;
          [k: string]: unknown;
        };
        phoneNumber?: {
          /**
           * The two-character ISO-3166-1 alpha-2 country code of the phone number.
           * For example, **US** or **NL**.
           */
          phoneCountryCode?: string;
          /**
           * The phone number.
           * The inclusion of the phone number country code is not necessary.
           */
          phoneNumber?: string;
          /**
           * The type of the phone number.
           * Possible values: **Landline**, **Mobile**, **SIP**, **Fax**.
           */
          phoneType?: "Fax" | "Landline" | "Mobile" | "SIP";
          [k: string]: unknown;
        };
        /**
         * The URL of the website of the contact.
         */
        webAddress?: string;
        [k: string]: unknown;
      };
      expiration?: {
        /**
         * The month in which the card will expire.
         */
        month?: string;
        /**
         * The year in which the card will expire.
         */
        year?: string;
        [k: string]: unknown;
      };
      /**
       * The form factor of the card.
       * Possible values: **virtual**, **physical**.
       */
      formFactor: "physical" | "unknown" | "virtual";
      /**
       * Last last four digits of the card number.
       */
      lastFour?: string;
      /**
       * The primary account number (PAN) of the card.
       * > The PAN is masked by default and returned only for single-use virtual cards.
       */
      number: string;
      [k: string]: unknown;
    };
    CardConfiguration: {
      /**
       * Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions.
       */
      activation?: string;
      /**
       * Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process.
       *
       * Maximum length: 255 characters.
       */
      activationUrl?: string;
      bulkAddress?: {
        /**
         * The name of the city.
         */
        city?: string;
        /**
         * The name of the company.
         */
        company?: string;
        /**
         * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
         */
        country: string;
        /**
         * The email address.
         */
        email?: string;
        /**
         * The house number or name.
         */
        houseNumberOrName?: string;
        /**
         * The full telephone number.
         */
        mobile?: string;
        /**
         * The postal code.
         *
         * Maximum length:
         *
         * * 5 digits for addresses in the US.
         *
         * * 10 characters for all other countries.
         */
        postalCode?: string;
        /**
         * The two-letter ISO 3166-2 state or province code.
         *
         * Maximum length: 2 characters for addresses in the US.
         */
        stateOrProvince?: string;
        /**
         * The streetname of the house.
         */
        street?: string;
        [k: string]: unknown;
      };
      /**
       * The ID of the card image. This is the image that will be printed on the full front of the card.
       */
      cardImageId?: string;
      /**
       * Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.
       */
      carrier?: string;
      /**
       * The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.
       */
      carrierImageId?: string;
      /**
       * The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.
       *
       * For example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.
       */
      configurationProfileId: string;
      /**
       * The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**.
       */
      currency?: string;
      /**
       * Overrides the envelope design ID defined in the `configurationProfileId`.
       */
      envelope?: string;
      /**
       * Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.
       */
      insert?: string;
      /**
       * The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**.
       */
      language?: string;
      /**
       * The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.
       */
      logoImageId?: string;
      /**
       * Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.
       */
      pinMailer?: string;
      /**
       * Overrides the logistics company defined in the `configurationProfileId`.
       */
      shipmentMethod?: string;
      [k: string]: unknown;
    };
    CardOrderItem: {
      /**
       * The unique identifier of the balance platform.
       */
      balancePlatform?: string;
      card?: {
        /**
         * Status of the delivery.
         */
        status?: "created" | "delivered" | "processing" | "produced" | "rejected" | "shipped" | "unknown";
        /**
         * Error status, if any.
         */
        statusError?: string;
        /**
         * Error message, if any.
         */
        statusErrorMessage?: string;
        /**
         * Tracking number of the delivery.
         */
        trackingNumber?: string;
        [k: string]: unknown;
      };
      /**
       * The unique identifier of the card order.
       */
      cardOrderItemReference?: string;
      /**
       * The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
       */
      creationDate?: string;
      /**
       * The ID of the resource.
       */
      id?: string;
      /**
       * The unique identifier of the payment instrument related to the card order.
       */
      paymentInstrumentReference?: string;
      pin?: {
        /**
         * Status of the delivery.
         */
        status?: "created" | "delivered" | "processing" | "produced" | "rejected" | "shipped" | "unknown";
        /**
         * Error status, if any.
         */
        statusError?: string;
        /**
         * Error message, if any.
         */
        statusErrorMessage?: string;
        /**
         * Tracking number of the delivery.
         */
        trackingNumber?: string;
        [k: string]: unknown;
      };
      /**
       * Shipping method used to deliver the card or the PIN.
       */
      shippingMethod?: string;
      [k: string]: unknown;
    };
    CardOrderItemDeliveryStatus: {
      /**
       * Status of the delivery.
       */
      status?: "created" | "delivered" | "processing" | "produced" | "rejected" | "shipped" | "unknown";
      /**
       * Error status, if any.
       */
      statusError?: string;
      /**
       * Error message, if any.
       */
      statusErrorMessage?: string;
      /**
       * Tracking number of the delivery.
       */
      trackingNumber?: string;
      [k: string]: unknown;
    };
    CardOrderNotificationRequest: {
      data: {
        /**
         * The unique identifier of the balance platform.
         */
        balancePlatform?: string;
        card?: {
          /**
           * Status of the delivery.
           */
          status?: "created" | "delivered" | "processing" | "produced" | "rejected" | "shipped" | "unknown";
          /**
           * Error status, if any.
           */
          statusError?: string;
          /**
           * Error message, if any.
           */
          statusErrorMessage?: string;
          /**
           * Tracking number of the delivery.
           */
          trackingNumber?: string;
          [k: string]: unknown;
        };
        /**
         * The unique identifier of the card order.
         */
        cardOrderItemReference?: string;
        /**
         * The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
         */
        creationDate?: string;
        /**
         * The ID of the resource.
         */
        id?: string;
        /**
         * The unique identifier of the payment instrument related to the card order.
         */
        paymentInstrumentReference?: string;
        pin?: {
          /**
           * Status of the delivery.
           */
          status?: "created" | "delivered" | "processing" | "produced" | "rejected" | "shipped" | "unknown";
          /**
           * Error status, if any.
           */
          statusError?: string;
          /**
           * Error message, if any.
           */
          statusErrorMessage?: string;
          /**
           * Tracking number of the delivery.
           */
          trackingNumber?: string;
          [k: string]: unknown;
        };
        /**
         * Shipping method used to deliver the card or the PIN.
         */
        shippingMethod?: string;
        [k: string]: unknown;
      };
      /**
       * The environment from which the webhook originated.
       *
       * Possible values: **test**, **live**.
       */
      environment: string;
      /**
       * Type of notification.
       */
      type: "balancePlatform.cardorder.created" | "balancePlatform.cardorder.updated";
      [k: string]: unknown;
    };
    Contact: {
      address?: {
        /**
         * The name of the city. Maximum length: 3000 characters.
         */
        city: string;
        /**
         * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
         * > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
         */
        country: string;
        /**
         * The number or name of the house. Maximum length: 3000 characters.
         */
        houseNumberOrName: string;
        /**
         * A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
         */
        postalCode: string;
        /**
         * The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
         * > Required for the US and Canada.
         */
        stateOrProvince?: string;
        /**
         * The name of the street. Maximum length: 3000 characters.
         * > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
         */
        street: string;
        [k: string]: unknown;
      };
      /**
       * The e-mail address of the contact.
       */
      email?: string;
      /**
       * The phone number of the contact provided as a single string.  It will be handled as a landline phone.
       * **Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
       */
      fullPhoneNumber?: string;
      name?: {
        /**
         * The first name.
         */
        firstName: string;
        /**
         * The last name.
         */
        lastName: string;
        [k: string]: unknown;
      };
      personalData?: {
        /**
         * The date of birth of the person.
         * The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
         */
        dateOfBirth?: string;
        /**
         * An ID number of the person.
         */
        idNumber?: string;
        /**
         * The nationality of the person represented by a two-character country code.
         * >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
         */
        nationality?: string;
        [k: string]: unknown;
      };
      phoneNumber?: {
        /**
         * The two-character ISO-3166-1 alpha-2 country code of the phone number.
         * For example, **US** or **NL**.
         */
        phoneCountryCode?: string;
        /**
         * The phone number.
         * The inclusion of the phone number country code is not necessary.
         */
        phoneNumber?: string;
        /**
         * The type of the phone number.
         * Possible values: **Landline**, **Mobile**, **SIP**, **Fax**.
         */
        phoneType?: "Fax" | "Landline" | "Mobile" | "SIP";
        [k: string]: unknown;
      };
      /**
       * The URL of the website of the contact.
       */
      webAddress?: string;
      [k: string]: unknown;
    };
    ContactDetails: {
      address: {
        /**
         * The name of the city. Maximum length: 3000 characters.
         */
        city: string;
        /**
         * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
         * > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
         */
        country: string;
        /**
         * The number or name of the house. Maximum length: 3000 characters.
         */
        houseNumberOrName: string;
        /**
         * A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
         */
        postalCode: string;
        /**
         * The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
         * > Required for the US and Canada.
         */
        stateOrProvince?: string;
        /**
         * The name of the street. Maximum length: 3000 characters.
         * > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
         */
        street: string;
        [k: string]: unknown;
      };
      /**
       * The email address of the account holder.
       */
      email: string;
      phone: {
        /**
         * The full phone number provided as a single string.
         * For example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**,
         *
         *  or **"(0031) 611223344"**.
         */
        number: string;
        /**
         * Type of phone number.
         * Possible values:
         * **Landline**, **Mobile**.
         *
         */
        type: "Landline" | "Mobile";
        [k: string]: unknown;
      };
      /**
       * The URL of the account holder's website.
       */
      webAddress?: string;
      [k: string]: unknown;
    };
    CronSweepSchedule: {
      /**
       * A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.
       *
       * The expression must have five values separated by a single space in the following order:
       *
       * * Minute: **0-59**
       *
       * * Hour: **0-23**
       *
       * * Day of the month: **1-31**
       *
       * * Month: **1-12** or **JAN-DEC**
       *
       * * Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.
       *
       * The following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and ** /**. See [crontab guru](https://crontab.guru/) for more examples.
       */
      cronExpression: string;
      /**
       * The schedule type.
       *
       * Possible values:
       *
       * * **cron**: push out funds based on a cron expression.
       *
       * * **daily**: push out funds daily at 07:00 AM CET.
       *
       * * **weekly**: push out funds every Monday at 07:00 AM CET.
       *
       * * **monthly**: push out funds every first of the month at 07:00 AM CET.
       *
       * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
       */
      type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
    };
    Expiry: {
      /**
       * The month in which the card will expire.
       */
      month?: string;
      /**
       * The year in which the card will expire.
       */
      year?: string;
      [k: string]: unknown;
    };
    IbanAccountIdentification: {
      /**
       * The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.
       */
      iban: string;
      /**
       * **iban**
       */
      type: "iban";
    };
    JSONObject: {
      paths?: {
        content?: string[];
        [k: string]: unknown;
      }[];
      rootPath?: {
        content?: string[];
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    JSONPath: {
      content?: string[];
      [k: string]: unknown;
    };
    Name: {
      /**
       * The first name.
       */
      firstName: string;
      /**
       * The last name.
       */
      lastName: string;
      [k: string]: unknown;
    };
    PaymentInstrument: {
      /**
       * The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.
       */
      balanceAccountId: string;
      /**
       * Contains the business account details. Returned when you create a payment instrument with `type` **bankAccount**.
       */
      bankAccount?:
        | {
            /**
             * The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.
             */
            iban: string;
            /**
             * **iban**
             */
            type: "iban";
          }
        | {
            /**
             * The bank account number, without separators or whitespace.
             */
            accountNumber: string;
            /**
             * The bank account type.
             *
             * Possible values: **checking** or **savings**. Defaults to **checking**.
             */
            accountType?: "checking" | "savings";
            /**
             * The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.
             */
            routingNumber: string;
            /**
             * **usLocal**
             */
            type: "usLocal";
          };
      card?: {
        authentication?: {
          /**
           * The email address where the one-time password (OTP) is sent.
           */
          email?: string;
          /**
           * The password used for 3D Secure password-based authentication. The value must be between 1 to 30 characters and must only contain the following supported characters.
           *
           * * Characters between **a-z**, **A-Z**, and **0-9**
           *
           * * Special characters: **äöüßÄÖÜ+-* /ç%()=?!~#'",;:$&àùòâôûáúó**
           */
          password?: string;
          phone?: {
            /**
             * The full phone number provided as a single string.
             * For example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**,
             *
             *  or **"(0031) 611223344"**.
             */
            number: string;
            /**
             * Type of phone number.
             * Possible values:
             * **Landline**, **Mobile**.
             *
             */
            type: "Landline" | "Mobile";
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * The bank identification number (BIN) of the card number.
         */
        bin?: string;
        /**
         * The brand of the physical or the virtual card.
         * Possible values: **visa**, **mc**.
         */
        brand: string;
        /**
         * The brand variant of the physical or the virtual card.
         * >Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.
         */
        brandVariant: string;
        /**
         * The name of the cardholder.
         *  Maximum length: 26 characters.
         */
        cardholderName: string;
        configuration?: {
          /**
           * Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions.
           */
          activation?: string;
          /**
           * Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process.
           *
           * Maximum length: 255 characters.
           */
          activationUrl?: string;
          bulkAddress?: {
            /**
             * The name of the city.
             */
            city?: string;
            /**
             * The name of the company.
             */
            company?: string;
            /**
             * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
             */
            country: string;
            /**
             * The email address.
             */
            email?: string;
            /**
             * The house number or name.
             */
            houseNumberOrName?: string;
            /**
             * The full telephone number.
             */
            mobile?: string;
            /**
             * The postal code.
             *
             * Maximum length:
             *
             * * 5 digits for addresses in the US.
             *
             * * 10 characters for all other countries.
             */
            postalCode?: string;
            /**
             * The two-letter ISO 3166-2 state or province code.
             *
             * Maximum length: 2 characters for addresses in the US.
             */
            stateOrProvince?: string;
            /**
             * The streetname of the house.
             */
            street?: string;
            [k: string]: unknown;
          };
          /**
           * The ID of the card image. This is the image that will be printed on the full front of the card.
           */
          cardImageId?: string;
          /**
           * Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.
           */
          carrier?: string;
          /**
           * The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.
           */
          carrierImageId?: string;
          /**
           * The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.
           *
           * For example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.
           */
          configurationProfileId: string;
          /**
           * The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**.
           */
          currency?: string;
          /**
           * Overrides the envelope design ID defined in the `configurationProfileId`.
           */
          envelope?: string;
          /**
           * Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.
           */
          insert?: string;
          /**
           * The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**.
           */
          language?: string;
          /**
           * The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.
           */
          logoImageId?: string;
          /**
           * Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.
           */
          pinMailer?: string;
          /**
           * Overrides the logistics company defined in the `configurationProfileId`.
           */
          shipmentMethod?: string;
          [k: string]: unknown;
        };
        /**
         * The CVC2 value of the card.
         * > The CVC2 is not sent by default. This is only returned in the `POST` response for single-use virtual cards.
         */
        cvc?: string;
        deliveryContact?: {
          address?: {
            /**
             * The name of the city. Maximum length: 3000 characters.
             */
            city: string;
            /**
             * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
             * > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
             */
            country: string;
            /**
             * The number or name of the house. Maximum length: 3000 characters.
             */
            houseNumberOrName: string;
            /**
             * A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
             */
            postalCode: string;
            /**
             * The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
             * > Required for the US and Canada.
             */
            stateOrProvince?: string;
            /**
             * The name of the street. Maximum length: 3000 characters.
             * > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
             */
            street: string;
            [k: string]: unknown;
          };
          /**
           * The e-mail address of the contact.
           */
          email?: string;
          /**
           * The phone number of the contact provided as a single string.  It will be handled as a landline phone.
           * **Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
           */
          fullPhoneNumber?: string;
          name?: {
            /**
             * The first name.
             */
            firstName: string;
            /**
             * The last name.
             */
            lastName: string;
            [k: string]: unknown;
          };
          personalData?: {
            /**
             * The date of birth of the person.
             * The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
             */
            dateOfBirth?: string;
            /**
             * An ID number of the person.
             */
            idNumber?: string;
            /**
             * The nationality of the person represented by a two-character country code.
             * >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
             */
            nationality?: string;
            [k: string]: unknown;
          };
          phoneNumber?: {
            /**
             * The two-character ISO-3166-1 alpha-2 country code of the phone number.
             * For example, **US** or **NL**.
             */
            phoneCountryCode?: string;
            /**
             * The phone number.
             * The inclusion of the phone number country code is not necessary.
             */
            phoneNumber?: string;
            /**
             * The type of the phone number.
             * Possible values: **Landline**, **Mobile**, **SIP**, **Fax**.
             */
            phoneType?: "Fax" | "Landline" | "Mobile" | "SIP";
            [k: string]: unknown;
          };
          /**
           * The URL of the website of the contact.
           */
          webAddress?: string;
          [k: string]: unknown;
        };
        expiration?: {
          /**
           * The month in which the card will expire.
           */
          month?: string;
          /**
           * The year in which the card will expire.
           */
          year?: string;
          [k: string]: unknown;
        };
        /**
         * The form factor of the card.
         * Possible values: **virtual**, **physical**.
         */
        formFactor: "physical" | "unknown" | "virtual";
        /**
         * Last last four digits of the card number.
         */
        lastFour?: string;
        /**
         * The primary account number (PAN) of the card.
         * > The PAN is masked by default and returned only for single-use virtual cards.
         */
        number: string;
        [k: string]: unknown;
      };
      /**
       * Your description for the payment instrument, maximum 300 characters.
       */
      description?: string;
      /**
       * The unique identifier of the payment instrument.
       */
      id: string;
      /**
       * The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.
       */
      issuingCountryCode: string;
      /**
       * The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.
       */
      paymentInstrumentGroupId?: string;
      /**
       * Your reference for the payment instrument, maximum 150 characters.
       */
      reference?: string;
      /**
       * The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.
       *
       * Possible values:
       *
       *  * **Active**:  The payment instrument is active and can be used to make payments.
       *
       *  * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.
       *
       * * **Inactive**: The payment instrument is inactive and cannot be used to make payments.
       *
       *  * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.
       *
       *  * **Closed**: The payment instrument is permanently closed. This action cannot be undone.
       *
       * * **Stolen**
       *
       *  * **Lost**
       *
       *
       */
      status?:
        | "Active"
        | "Closed"
        | "Inactive"
        | "Lost"
        | "Requested"
        | "Stolen"
        | "Suspended"
        | "blocked"
        | "discarded";
      /**
       * Type of payment instrument.
       *
       * Possible value: **card**, **bankAccount**.
       */
      type: "bankAccount" | "card";
      [k: string]: unknown;
    };
    PaymentInstrumentNotificationData: {
      /**
       * The unique identifier of the balance platform.
       */
      balancePlatform?: string;
      paymentInstrument?: {
        /**
         * The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.
         */
        balanceAccountId: string;
        /**
         * Contains the business account details. Returned when you create a payment instrument with `type` **bankAccount**.
         */
        bankAccount?:
          | {
              /**
               * The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.
               */
              iban: string;
              /**
               * **iban**
               */
              type: "iban";
            }
          | {
              /**
               * The bank account number, without separators or whitespace.
               */
              accountNumber: string;
              /**
               * The bank account type.
               *
               * Possible values: **checking** or **savings**. Defaults to **checking**.
               */
              accountType?: "checking" | "savings";
              /**
               * The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.
               */
              routingNumber: string;
              /**
               * **usLocal**
               */
              type: "usLocal";
            };
        card?: {
          authentication?: {
            /**
             * The email address where the one-time password (OTP) is sent.
             */
            email?: string;
            /**
             * The password used for 3D Secure password-based authentication. The value must be between 1 to 30 characters and must only contain the following supported characters.
             *
             * * Characters between **a-z**, **A-Z**, and **0-9**
             *
             * * Special characters: **äöüßÄÖÜ+-* /ç%()=?!~#'",;:$&àùòâôûáúó**
             */
            password?: string;
            phone?: {
              /**
               * The full phone number provided as a single string.
               * For example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**,
               *
               *  or **"(0031) 611223344"**.
               */
              number: string;
              /**
               * Type of phone number.
               * Possible values:
               * **Landline**, **Mobile**.
               *
               */
              type: "Landline" | "Mobile";
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * The bank identification number (BIN) of the card number.
           */
          bin?: string;
          /**
           * The brand of the physical or the virtual card.
           * Possible values: **visa**, **mc**.
           */
          brand: string;
          /**
           * The brand variant of the physical or the virtual card.
           * >Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.
           */
          brandVariant: string;
          /**
           * The name of the cardholder.
           *  Maximum length: 26 characters.
           */
          cardholderName: string;
          configuration?: {
            /**
             * Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions.
             */
            activation?: string;
            /**
             * Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process.
             *
             * Maximum length: 255 characters.
             */
            activationUrl?: string;
            bulkAddress?: {
              /**
               * The name of the city.
               */
              city?: string;
              /**
               * The name of the company.
               */
              company?: string;
              /**
               * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
               */
              country: string;
              /**
               * The email address.
               */
              email?: string;
              /**
               * The house number or name.
               */
              houseNumberOrName?: string;
              /**
               * The full telephone number.
               */
              mobile?: string;
              /**
               * The postal code.
               *
               * Maximum length:
               *
               * * 5 digits for addresses in the US.
               *
               * * 10 characters for all other countries.
               */
              postalCode?: string;
              /**
               * The two-letter ISO 3166-2 state or province code.
               *
               * Maximum length: 2 characters for addresses in the US.
               */
              stateOrProvince?: string;
              /**
               * The streetname of the house.
               */
              street?: string;
              [k: string]: unknown;
            };
            /**
             * The ID of the card image. This is the image that will be printed on the full front of the card.
             */
            cardImageId?: string;
            /**
             * Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.
             */
            carrier?: string;
            /**
             * The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.
             */
            carrierImageId?: string;
            /**
             * The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.
             *
             * For example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.
             */
            configurationProfileId: string;
            /**
             * The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**.
             */
            currency?: string;
            /**
             * Overrides the envelope design ID defined in the `configurationProfileId`.
             */
            envelope?: string;
            /**
             * Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.
             */
            insert?: string;
            /**
             * The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**.
             */
            language?: string;
            /**
             * The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.
             */
            logoImageId?: string;
            /**
             * Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.
             */
            pinMailer?: string;
            /**
             * Overrides the logistics company defined in the `configurationProfileId`.
             */
            shipmentMethod?: string;
            [k: string]: unknown;
          };
          /**
           * The CVC2 value of the card.
           * > The CVC2 is not sent by default. This is only returned in the `POST` response for single-use virtual cards.
           */
          cvc?: string;
          deliveryContact?: {
            address?: {
              /**
               * The name of the city. Maximum length: 3000 characters.
               */
              city: string;
              /**
               * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
               * > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
               */
              country: string;
              /**
               * The number or name of the house. Maximum length: 3000 characters.
               */
              houseNumberOrName: string;
              /**
               * A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
               */
              postalCode: string;
              /**
               * The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
               * > Required for the US and Canada.
               */
              stateOrProvince?: string;
              /**
               * The name of the street. Maximum length: 3000 characters.
               * > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
               */
              street: string;
              [k: string]: unknown;
            };
            /**
             * The e-mail address of the contact.
             */
            email?: string;
            /**
             * The phone number of the contact provided as a single string.  It will be handled as a landline phone.
             * **Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
             */
            fullPhoneNumber?: string;
            name?: {
              /**
               * The first name.
               */
              firstName: string;
              /**
               * The last name.
               */
              lastName: string;
              [k: string]: unknown;
            };
            personalData?: {
              /**
               * The date of birth of the person.
               * The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
               */
              dateOfBirth?: string;
              /**
               * An ID number of the person.
               */
              idNumber?: string;
              /**
               * The nationality of the person represented by a two-character country code.
               * >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
               */
              nationality?: string;
              [k: string]: unknown;
            };
            phoneNumber?: {
              /**
               * The two-character ISO-3166-1 alpha-2 country code of the phone number.
               * For example, **US** or **NL**.
               */
              phoneCountryCode?: string;
              /**
               * The phone number.
               * The inclusion of the phone number country code is not necessary.
               */
              phoneNumber?: string;
              /**
               * The type of the phone number.
               * Possible values: **Landline**, **Mobile**, **SIP**, **Fax**.
               */
              phoneType?: "Fax" | "Landline" | "Mobile" | "SIP";
              [k: string]: unknown;
            };
            /**
             * The URL of the website of the contact.
             */
            webAddress?: string;
            [k: string]: unknown;
          };
          expiration?: {
            /**
             * The month in which the card will expire.
             */
            month?: string;
            /**
             * The year in which the card will expire.
             */
            year?: string;
            [k: string]: unknown;
          };
          /**
           * The form factor of the card.
           * Possible values: **virtual**, **physical**.
           */
          formFactor: "physical" | "unknown" | "virtual";
          /**
           * Last last four digits of the card number.
           */
          lastFour?: string;
          /**
           * The primary account number (PAN) of the card.
           * > The PAN is masked by default and returned only for single-use virtual cards.
           */
          number: string;
          [k: string]: unknown;
        };
        /**
         * Your description for the payment instrument, maximum 300 characters.
         */
        description?: string;
        /**
         * The unique identifier of the payment instrument.
         */
        id: string;
        /**
         * The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.
         */
        issuingCountryCode: string;
        /**
         * The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.
         */
        paymentInstrumentGroupId?: string;
        /**
         * Your reference for the payment instrument, maximum 150 characters.
         */
        reference?: string;
        /**
         * The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.
         *
         * Possible values:
         *
         *  * **Active**:  The payment instrument is active and can be used to make payments.
         *
         *  * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.
         *
         * * **Inactive**: The payment instrument is inactive and cannot be used to make payments.
         *
         *  * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.
         *
         *  * **Closed**: The payment instrument is permanently closed. This action cannot be undone.
         *
         * * **Stolen**
         *
         *  * **Lost**
         *
         *
         */
        status?:
          | "Active"
          | "Closed"
          | "Inactive"
          | "Lost"
          | "Requested"
          | "Stolen"
          | "Suspended"
          | "blocked"
          | "discarded";
        /**
         * Type of payment instrument.
         *
         * Possible value: **card**, **bankAccount**.
         */
        type: "bankAccount" | "card";
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    PaymentInstrumentReference: {
      /**
       * The unique identifier of the payment instrument.
       */
      id: string;
      [k: string]: unknown;
    };
    PaymentNotificationRequest: {
      data: {
        /**
         * The unique identifier of the balance platform.
         */
        balancePlatform?: string;
        paymentInstrument?: {
          /**
           * The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.
           */
          balanceAccountId: string;
          /**
           * Contains the business account details. Returned when you create a payment instrument with `type` **bankAccount**.
           */
          bankAccount?:
            | {
                /**
                 * The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.
                 */
                iban: string;
                /**
                 * **iban**
                 */
                type: "iban";
              }
            | {
                /**
                 * The bank account number, without separators or whitespace.
                 */
                accountNumber: string;
                /**
                 * The bank account type.
                 *
                 * Possible values: **checking** or **savings**. Defaults to **checking**.
                 */
                accountType?: "checking" | "savings";
                /**
                 * The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.
                 */
                routingNumber: string;
                /**
                 * **usLocal**
                 */
                type: "usLocal";
              };
          card?: {
            authentication?: {
              /**
               * The email address where the one-time password (OTP) is sent.
               */
              email?: string;
              /**
               * The password used for 3D Secure password-based authentication. The value must be between 1 to 30 characters and must only contain the following supported characters.
               *
               * * Characters between **a-z**, **A-Z**, and **0-9**
               *
               * * Special characters: **äöüßÄÖÜ+-* /ç%()=?!~#'",;:$&àùòâôûáúó**
               */
              password?: string;
              phone?: {
                /**
                 * The full phone number provided as a single string.
                 * For example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**,
                 *
                 *  or **"(0031) 611223344"**.
                 */
                number: string;
                /**
                 * Type of phone number.
                 * Possible values:
                 * **Landline**, **Mobile**.
                 *
                 */
                type: "Landline" | "Mobile";
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The bank identification number (BIN) of the card number.
             */
            bin?: string;
            /**
             * The brand of the physical or the virtual card.
             * Possible values: **visa**, **mc**.
             */
            brand: string;
            /**
             * The brand variant of the physical or the virtual card.
             * >Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.
             */
            brandVariant: string;
            /**
             * The name of the cardholder.
             *  Maximum length: 26 characters.
             */
            cardholderName: string;
            configuration?: {
              /**
               * Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions.
               */
              activation?: string;
              /**
               * Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process.
               *
               * Maximum length: 255 characters.
               */
              activationUrl?: string;
              bulkAddress?: {
                /**
                 * The name of the city.
                 */
                city?: string;
                /**
                 * The name of the company.
                 */
                company?: string;
                /**
                 * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
                 */
                country: string;
                /**
                 * The email address.
                 */
                email?: string;
                /**
                 * The house number or name.
                 */
                houseNumberOrName?: string;
                /**
                 * The full telephone number.
                 */
                mobile?: string;
                /**
                 * The postal code.
                 *
                 * Maximum length:
                 *
                 * * 5 digits for addresses in the US.
                 *
                 * * 10 characters for all other countries.
                 */
                postalCode?: string;
                /**
                 * The two-letter ISO 3166-2 state or province code.
                 *
                 * Maximum length: 2 characters for addresses in the US.
                 */
                stateOrProvince?: string;
                /**
                 * The streetname of the house.
                 */
                street?: string;
                [k: string]: unknown;
              };
              /**
               * The ID of the card image. This is the image that will be printed on the full front of the card.
               */
              cardImageId?: string;
              /**
               * Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.
               */
              carrier?: string;
              /**
               * The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.
               */
              carrierImageId?: string;
              /**
               * The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.
               *
               * For example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.
               */
              configurationProfileId: string;
              /**
               * The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**.
               */
              currency?: string;
              /**
               * Overrides the envelope design ID defined in the `configurationProfileId`.
               */
              envelope?: string;
              /**
               * Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.
               */
              insert?: string;
              /**
               * The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**.
               */
              language?: string;
              /**
               * The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.
               */
              logoImageId?: string;
              /**
               * Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.
               */
              pinMailer?: string;
              /**
               * Overrides the logistics company defined in the `configurationProfileId`.
               */
              shipmentMethod?: string;
              [k: string]: unknown;
            };
            /**
             * The CVC2 value of the card.
             * > The CVC2 is not sent by default. This is only returned in the `POST` response for single-use virtual cards.
             */
            cvc?: string;
            deliveryContact?: {
              address?: {
                /**
                 * The name of the city. Maximum length: 3000 characters.
                 */
                city: string;
                /**
                 * The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
                 * > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
                 */
                country: string;
                /**
                 * The number or name of the house. Maximum length: 3000 characters.
                 */
                houseNumberOrName: string;
                /**
                 * A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
                 */
                postalCode: string;
                /**
                 * The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
                 * > Required for the US and Canada.
                 */
                stateOrProvince?: string;
                /**
                 * The name of the street. Maximum length: 3000 characters.
                 * > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
                 */
                street: string;
                [k: string]: unknown;
              };
              /**
               * The e-mail address of the contact.
               */
              email?: string;
              /**
               * The phone number of the contact provided as a single string.  It will be handled as a landline phone.
               * **Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
               */
              fullPhoneNumber?: string;
              name?: {
                /**
                 * The first name.
                 */
                firstName: string;
                /**
                 * The last name.
                 */
                lastName: string;
                [k: string]: unknown;
              };
              personalData?: {
                /**
                 * The date of birth of the person.
                 * The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
                 */
                dateOfBirth?: string;
                /**
                 * An ID number of the person.
                 */
                idNumber?: string;
                /**
                 * The nationality of the person represented by a two-character country code.
                 * >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
                 */
                nationality?: string;
                [k: string]: unknown;
              };
              phoneNumber?: {
                /**
                 * The two-character ISO-3166-1 alpha-2 country code of the phone number.
                 * For example, **US** or **NL**.
                 */
                phoneCountryCode?: string;
                /**
                 * The phone number.
                 * The inclusion of the phone number country code is not necessary.
                 */
                phoneNumber?: string;
                /**
                 * The type of the phone number.
                 * Possible values: **Landline**, **Mobile**, **SIP**, **Fax**.
                 */
                phoneType?: "Fax" | "Landline" | "Mobile" | "SIP";
                [k: string]: unknown;
              };
              /**
               * The URL of the website of the contact.
               */
              webAddress?: string;
              [k: string]: unknown;
            };
            expiration?: {
              /**
               * The month in which the card will expire.
               */
              month?: string;
              /**
               * The year in which the card will expire.
               */
              year?: string;
              [k: string]: unknown;
            };
            /**
             * The form factor of the card.
             * Possible values: **virtual**, **physical**.
             */
            formFactor: "physical" | "unknown" | "virtual";
            /**
             * Last last four digits of the card number.
             */
            lastFour?: string;
            /**
             * The primary account number (PAN) of the card.
             * > The PAN is masked by default and returned only for single-use virtual cards.
             */
            number: string;
            [k: string]: unknown;
          };
          /**
           * Your description for the payment instrument, maximum 300 characters.
           */
          description?: string;
          /**
           * The unique identifier of the payment instrument.
           */
          id: string;
          /**
           * The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.
           */
          issuingCountryCode: string;
          /**
           * The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.
           */
          paymentInstrumentGroupId?: string;
          /**
           * Your reference for the payment instrument, maximum 150 characters.
           */
          reference?: string;
          /**
           * The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.
           *
           * Possible values:
           *
           *  * **Active**:  The payment instrument is active and can be used to make payments.
           *
           *  * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.
           *
           * * **Inactive**: The payment instrument is inactive and cannot be used to make payments.
           *
           *  * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.
           *
           *  * **Closed**: The payment instrument is permanently closed. This action cannot be undone.
           *
           * * **Stolen**
           *
           *  * **Lost**
           *
           *
           */
          status?:
            | "Active"
            | "Closed"
            | "Inactive"
            | "Lost"
            | "Requested"
            | "Stolen"
            | "Suspended"
            | "blocked"
            | "discarded";
          /**
           * Type of payment instrument.
           *
           * Possible value: **card**, **bankAccount**.
           */
          type: "bankAccount" | "card";
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      /**
       * The environment from which the webhook originated.
       *
       * Possible values: **test**, **live**.
       */
      environment: string;
      /**
       * Type of notification.
       */
      type: "balancePlatform.paymentInstrument.created" | "balancePlatform.paymentInstrument.updated";
      [k: string]: unknown;
    };
    PersonalData: {
      /**
       * The date of birth of the person.
       * The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
       */
      dateOfBirth?: string;
      /**
       * An ID number of the person.
       */
      idNumber?: string;
      /**
       * The nationality of the person represented by a two-character country code.
       * >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
       */
      nationality?: string;
      [k: string]: unknown;
    };
    Phone: {
      /**
       * The full phone number provided as a single string.
       * For example, **"0031 6 11 22 33 44"**, **"+316/1122-3344"**,
       *
       *  or **"(0031) 611223344"**.
       */
      number: string;
      /**
       * Type of phone number.
       * Possible values:
       * **Landline**, **Mobile**.
       *
       */
      type: "Landline" | "Mobile";
      [k: string]: unknown;
    };
    PhoneNumber: {
      /**
       * The two-character ISO-3166-1 alpha-2 country code of the phone number.
       * For example, **US** or **NL**.
       */
      phoneCountryCode?: string;
      /**
       * The phone number.
       * The inclusion of the phone number country code is not necessary.
       */
      phoneNumber?: string;
      /**
       * The type of the phone number.
       * Possible values: **Landline**, **Mobile**, **SIP**, **Fax**.
       */
      phoneType?: "Fax" | "Landline" | "Mobile" | "SIP";
      [k: string]: unknown;
    };
    Resource: {
      /**
       * The unique identifier of the balance platform.
       */
      balancePlatform?: string;
      /**
       * The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
       */
      creationDate?: string;
      /**
       * The ID of the resource.
       */
      id?: string;
      [k: string]: unknown;
    };
    SweepConfiguration: {
      /**
       * The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
       *
       *  You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
       */
      balanceAccountId?: string;
      /**
       * The unique identifier of the sweep.
       */
      id: string;
      /**
       * The merchant account that will be the source of funds. You can only use this if you are processing payments with Adyen. This can only be used for sweeps of `type` **pull** and `schedule.type` **balance**.
       */
      merchantAccount?: string;
      /**
       * The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
       */
      schedule:
        | {
            /**
             * A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.
             *
             * The expression must have five values separated by a single space in the following order:
             *
             * * Minute: **0-59**
             *
             * * Hour: **0-23**
             *
             * * Day of the month: **1-31**
             *
             * * Month: **1-12** or **JAN-DEC**
             *
             * * Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.
             *
             * The following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and ** /**. See [crontab guru](https://crontab.guru/) for more examples.
             */
            cronExpression: string;
            /**
             * The schedule type.
             *
             * Possible values:
             *
             * * **cron**: push out funds based on a cron expression.
             *
             * * **daily**: push out funds daily at 07:00 AM CET.
             *
             * * **weekly**: push out funds every Monday at 07:00 AM CET.
             *
             * * **monthly**: push out funds every first of the month at 07:00 AM CET.
             *
             * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
             */
            type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
          }
        | {
            /**
             * The schedule type.
             *
             * Possible values:
             *
             * * **cron**: push out funds based on a cron expression.
             *
             * * **daily**: push out funds daily at 07:00 AM CET.
             *
             * * **weekly**: push out funds every Monday at 07:00 AM CET.
             *
             * * **monthly**: push out funds every first of the month at 07:00 AM CET.
             *
             * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
             */
            type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
          };
      /**
       * The status of the sweep. If not provided, by default, this is set to **active**.
       *
       * Possible values:
       *
       *  * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
       *
       *  * **inactive**: the sweep is disabled and cannot be triggered.
       *
       *
       */
      status?: "active" | "inactive";
      sweepAmount?: {
        /**
         * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
         */
        currency: string;
        /**
         * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
         */
        value: number;
        [k: string]: unknown;
      };
      targetAmount?: {
        /**
         * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
         */
        currency: string;
        /**
         * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
         */
        value: number;
        [k: string]: unknown;
      };
      /**
       * The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).
       *
       * You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.
       */
      transferInstrumentId?: string;
      triggerAmount?: {
        /**
         * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
         */
        currency: string;
        /**
         * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
         */
        value: number;
        [k: string]: unknown;
      };
      /**
       * The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
       *
       * Possible values:
       *
       *  * **push**: _push out funds_ to a destination balance account or transfer instrument.
       *
       *  * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
       */
      type?: "pull" | "push";
      [k: string]: unknown;
    };
    SweepConfigurationNotificationData: {
      /**
       * The unique identifier of the balance account for which the sweep was configured.
       */
      accountId?: string;
      /**
       * The unique identifier of the balance platform.
       */
      balancePlatform?: string;
      sweep?: {
        counterparty: {
          /**
           * The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
           *
           *  You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
           */
          balanceAccountId?: string;
          /**
           * The merchant account that will be the source of funds, if you are processing payments with Adyen. You can only use this with sweeps of `type` **pull** and `schedule.type` **balance**.
           */
          merchantAccount?: string;
          /**
           * The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).
           *
           * You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.
           */
          transferInstrumentId?: string;
          [k: string]: unknown;
        };
        /**
         * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.
         *
         * The sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances).
         */
        currency: string;
        /**
         * The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.
         *
         * If the message is longer after replacing placeholders, the message will be cut off at 140 characters.
         */
        description?: string;
        /**
         * The unique identifier of the sweep.
         */
        id: string;
        /**
         * The reason for disabling the sweep.
         */
        reason?:
          | "amountLimitExceeded"
          | "approved"
          | "counterpartyAccountBlocked"
          | "counterpartyAccountClosed"
          | "counterpartyAccountNotFound"
          | "counterpartyAddressRequired"
          | "counterpartyBankTimedOut"
          | "counterpartyBankUnavailable"
          | "error"
          | "notEnoughBalance"
          | "refusedByCounterpartyBank"
          | "routeNotFound"
          | "unknown";
        /**
         * The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
         */
        schedule:
          | {
              /**
               * A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.
               *
               * The expression must have five values separated by a single space in the following order:
               *
               * * Minute: **0-59**
               *
               * * Hour: **0-23**
               *
               * * Day of the month: **1-31**
               *
               * * Month: **1-12** or **JAN-DEC**
               *
               * * Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.
               *
               * The following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and ** /**. See [crontab guru](https://crontab.guru/) for more examples.
               */
              cronExpression: string;
              /**
               * The schedule type.
               *
               * Possible values:
               *
               * * **cron**: push out funds based on a cron expression.
               *
               * * **daily**: push out funds daily at 07:00 AM CET.
               *
               * * **weekly**: push out funds every Monday at 07:00 AM CET.
               *
               * * **monthly**: push out funds every first of the month at 07:00 AM CET.
               *
               * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
               */
              type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
            }
          | {
              /**
               * The schedule type.
               *
               * Possible values:
               *
               * * **cron**: push out funds based on a cron expression.
               *
               * * **daily**: push out funds daily at 07:00 AM CET.
               *
               * * **weekly**: push out funds every Monday at 07:00 AM CET.
               *
               * * **monthly**: push out funds every first of the month at 07:00 AM CET.
               *
               * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
               */
              type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
            };
        /**
         * The status of the sweep. If not provided, by default, this is set to **active**.
         *
         * Possible values:
         *
         *  * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
         *
         *  * **inactive**: the sweep is disabled and cannot be triggered.
         *
         *
         */
        status?: "active" | "inactive";
        sweepAmount?: {
          /**
           * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
           */
          currency: string;
          /**
           * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
           */
          value: number;
          [k: string]: unknown;
        };
        targetAmount?: {
          /**
           * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
           */
          currency: string;
          /**
           * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
           */
          value: number;
          [k: string]: unknown;
        };
        triggerAmount?: {
          /**
           * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
           */
          currency: string;
          /**
           * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
           */
          value: number;
          [k: string]: unknown;
        };
        /**
         * The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
         *
         * Possible values:
         *
         *  * **push**: _push out funds_ to a destination balance account or transfer instrument.
         *
         *  * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
         */
        type?: "pull" | "push";
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    SweepConfigurationNotificationRequest: {
      data: {
        /**
         * The unique identifier of the balance account for which the sweep was configured.
         */
        accountId?: string;
        /**
         * The unique identifier of the balance platform.
         */
        balancePlatform?: string;
        sweep?: {
          counterparty: {
            /**
             * The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
             *
             *  You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
             */
            balanceAccountId?: string;
            /**
             * The merchant account that will be the source of funds, if you are processing payments with Adyen. You can only use this with sweeps of `type` **pull** and `schedule.type` **balance**.
             */
            merchantAccount?: string;
            /**
             * The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).
             *
             * You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.
             */
            transferInstrumentId?: string;
            [k: string]: unknown;
          };
          /**
           * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.
           *
           * The sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances).
           */
          currency: string;
          /**
           * The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.
           *
           * If the message is longer after replacing placeholders, the message will be cut off at 140 characters.
           */
          description?: string;
          /**
           * The unique identifier of the sweep.
           */
          id: string;
          /**
           * The reason for disabling the sweep.
           */
          reason?:
            | "amountLimitExceeded"
            | "approved"
            | "counterpartyAccountBlocked"
            | "counterpartyAccountClosed"
            | "counterpartyAccountNotFound"
            | "counterpartyAddressRequired"
            | "counterpartyBankTimedOut"
            | "counterpartyBankUnavailable"
            | "error"
            | "notEnoughBalance"
            | "refusedByCounterpartyBank"
            | "routeNotFound"
            | "unknown";
          /**
           * The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
           */
          schedule:
            | {
                /**
                 * A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.
                 *
                 * The expression must have five values separated by a single space in the following order:
                 *
                 * * Minute: **0-59**
                 *
                 * * Hour: **0-23**
                 *
                 * * Day of the month: **1-31**
                 *
                 * * Month: **1-12** or **JAN-DEC**
                 *
                 * * Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.
                 *
                 * The following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and ** /**. See [crontab guru](https://crontab.guru/) for more examples.
                 */
                cronExpression: string;
                /**
                 * The schedule type.
                 *
                 * Possible values:
                 *
                 * * **cron**: push out funds based on a cron expression.
                 *
                 * * **daily**: push out funds daily at 07:00 AM CET.
                 *
                 * * **weekly**: push out funds every Monday at 07:00 AM CET.
                 *
                 * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                 *
                 * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                 */
                type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
              }
            | {
                /**
                 * The schedule type.
                 *
                 * Possible values:
                 *
                 * * **cron**: push out funds based on a cron expression.
                 *
                 * * **daily**: push out funds daily at 07:00 AM CET.
                 *
                 * * **weekly**: push out funds every Monday at 07:00 AM CET.
                 *
                 * * **monthly**: push out funds every first of the month at 07:00 AM CET.
                 *
                 * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
                 */
                type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
              };
          /**
           * The status of the sweep. If not provided, by default, this is set to **active**.
           *
           * Possible values:
           *
           *  * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
           *
           *  * **inactive**: the sweep is disabled and cannot be triggered.
           *
           *
           */
          status?: "active" | "inactive";
          sweepAmount?: {
            /**
             * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
             */
            currency: string;
            /**
             * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
             */
            value: number;
            [k: string]: unknown;
          };
          targetAmount?: {
            /**
             * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
             */
            currency: string;
            /**
             * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
             */
            value: number;
            [k: string]: unknown;
          };
          triggerAmount?: {
            /**
             * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
             */
            currency: string;
            /**
             * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
             */
            value: number;
            [k: string]: unknown;
          };
          /**
           * The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
           *
           * Possible values:
           *
           *  * **push**: _push out funds_ to a destination balance account or transfer instrument.
           *
           *  * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
           */
          type?: "pull" | "push";
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      /**
       * The environment from which the webhook originated.
       *
       * Possible values: **test**, **live**.
       */
      environment: string;
      /**
       * Type of notification.
       */
      type:
        | "balancePlatform.balanceAccountSweep.created"
        | "balancePlatform.balanceAccountSweep.updated"
        | "balancePlatform.balanceAccountSweep.deleted";
      [k: string]: unknown;
    };
    SweepConfigurationV2: {
      counterparty: {
        /**
         * The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
         *
         *  You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
         */
        balanceAccountId?: string;
        /**
         * The merchant account that will be the source of funds, if you are processing payments with Adyen. You can only use this with sweeps of `type` **pull** and `schedule.type` **balance**.
         */
        merchantAccount?: string;
        /**
         * The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).
         *
         * You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.
         */
        transferInstrumentId?: string;
        [k: string]: unknown;
      };
      /**
       * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.
       *
       * The sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances).
       */
      currency: string;
      /**
       * The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.
       *
       * If the message is longer after replacing placeholders, the message will be cut off at 140 characters.
       */
      description?: string;
      /**
       * The unique identifier of the sweep.
       */
      id: string;
      /**
       * The reason for disabling the sweep.
       */
      reason?:
        | "amountLimitExceeded"
        | "approved"
        | "counterpartyAccountBlocked"
        | "counterpartyAccountClosed"
        | "counterpartyAccountNotFound"
        | "counterpartyAddressRequired"
        | "counterpartyBankTimedOut"
        | "counterpartyBankUnavailable"
        | "error"
        | "notEnoughBalance"
        | "refusedByCounterpartyBank"
        | "routeNotFound"
        | "unknown";
      /**
       * The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.
       */
      schedule:
        | {
            /**
             * A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.
             *
             * The expression must have five values separated by a single space in the following order:
             *
             * * Minute: **0-59**
             *
             * * Hour: **0-23**
             *
             * * Day of the month: **1-31**
             *
             * * Month: **1-12** or **JAN-DEC**
             *
             * * Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.
             *
             * The following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and ** /**. See [crontab guru](https://crontab.guru/) for more examples.
             */
            cronExpression: string;
            /**
             * The schedule type.
             *
             * Possible values:
             *
             * * **cron**: push out funds based on a cron expression.
             *
             * * **daily**: push out funds daily at 07:00 AM CET.
             *
             * * **weekly**: push out funds every Monday at 07:00 AM CET.
             *
             * * **monthly**: push out funds every first of the month at 07:00 AM CET.
             *
             * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
             */
            type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
          }
        | {
            /**
             * The schedule type.
             *
             * Possible values:
             *
             * * **cron**: push out funds based on a cron expression.
             *
             * * **daily**: push out funds daily at 07:00 AM CET.
             *
             * * **weekly**: push out funds every Monday at 07:00 AM CET.
             *
             * * **monthly**: push out funds every first of the month at 07:00 AM CET.
             *
             * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
             */
            type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
          };
      /**
       * The status of the sweep. If not provided, by default, this is set to **active**.
       *
       * Possible values:
       *
       *  * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.
       *
       *  * **inactive**: the sweep is disabled and cannot be triggered.
       *
       *
       */
      status?: "active" | "inactive";
      sweepAmount?: {
        /**
         * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
         */
        currency: string;
        /**
         * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
         */
        value: number;
        [k: string]: unknown;
      };
      targetAmount?: {
        /**
         * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
         */
        currency: string;
        /**
         * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
         */
        value: number;
        [k: string]: unknown;
      };
      triggerAmount?: {
        /**
         * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
         */
        currency: string;
        /**
         * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
         */
        value: number;
        [k: string]: unknown;
      };
      /**
       * The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.
       *
       * Possible values:
       *
       *  * **push**: _push out funds_ to a destination balance account or transfer instrument.
       *
       *  * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.
       */
      type?: "pull" | "push";
      [k: string]: unknown;
    };
    SweepCounterparty: {
      /**
       * The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
       *
       *  You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.
       */
      balanceAccountId?: string;
      /**
       * The merchant account that will be the source of funds, if you are processing payments with Adyen. You can only use this with sweeps of `type` **pull** and `schedule.type` **balance**.
       */
      merchantAccount?: string;
      /**
       * The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).
       *
       * You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.
       */
      transferInstrumentId?: string;
      [k: string]: unknown;
    };
    SweepSchedule: {
      /**
       * The schedule type.
       *
       * Possible values:
       *
       * * **cron**: push out funds based on a cron expression.
       *
       * * **daily**: push out funds daily at 07:00 AM CET.
       *
       * * **weekly**: push out funds every Monday at 07:00 AM CET.
       *
       * * **monthly**: push out funds every first of the month at 07:00 AM CET.
       *
       * * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.
       */
      type?: "daily" | "weekly" | "monthly" | "balance" | "cron";
    };
    USLocalAccountIdentification: {
      /**
       * The bank account number, without separators or whitespace.
       */
      accountNumber: string;
      /**
       * The bank account type.
       *
       * Possible values: **checking** or **savings**. Defaults to **checking**.
       */
      accountType?: "checking" | "savings";
      /**
       * The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.
       */
      routingNumber: string;
      /**
       * **usLocal**
       */
      type: "usLocal";
    };
  };
}
